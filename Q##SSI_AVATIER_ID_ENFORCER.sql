CREATE OR REPLACE PACKAGE           "Q##SSI_AVATIER_ID_ENFORCER" AUTHID DEFINER
/*
| Automated Test Package for SSI_AVATIER_ID_ENFORCER
|
| Generated by Quest Code Tester for Oracle.
| Visit the user community at http://www.toadworld.com/products/code-tester/default.aspx
| Generated on 2019-11-10T18:26:58
*/
IS
/* Global array for skipping test cases. */
TYPE skip_tc_aat IS TABLE OF BOOLEAN INDEX BY VARCHAR2(32767);
Q##skip_tc_execution skip_tc_aat;
/* Global variable for quick test setting. */
Q##quick_test_only BOOLEAN DEFAULT FALSE;
PROCEDURE qcto#assert_null (outcome_guid_in IN VARCHAR2, 
is_null_in IN BOOLEAN, check_type_in IN VARCHAR2, raise_exc_in IN BOOLEAN := FALSE, add_to_message_in IN VARCHAR2 DEFAULT NULL );
PROCEDURE qcto#assert_null (outcome_guid_in IN VARCHAR2, 
is_null_in IN BOOLEAN, check_type_in IN VARCHAR2, raise_exc_in IN BOOLEAN, add_to_message_in IN BOOLEAN);
PROCEDURE qcto#assert_this (outcome_guid_in IN VARCHAR2, 
msg_in IN VARCHAR2, check_this_in IN BOOLEAN, null_ok_in IN BOOLEAN := FALSE, 
raise_exc_in IN BOOLEAN := FALSE);
PROCEDURE qcto#assert_this (outcome_guid_in IN VARCHAR2, 
msg_in IN VARCHAR2, check_this_in IN BOOLEAN, null_ok_in IN BOOLEAN := FALSE, 
raise_exc_in IN BOOLEAN := FALSE, universal_id_out out VARCHAR2);
PROCEDURE qcto#report_result (result_guid_in IN VARCHAR2, 
status_in IN VARCHAR2, description_in IN VARCHAR2);
PROCEDURE qcto#report_result (result_guid_in IN VARCHAR2, 
status_in IN VARCHAR2, description_in IN VARCHAR2, universal_id_out OUT VARCHAR2);
FUNCTION qcto#error_info RETURN VARCHAR2;
PROCEDURE Q##setup;
   PROCEDURE Q##teardown;
   PROCEDURE Q##F_CHECK_ACCOUNT_EXISTS;
   /*
   Test cases defined for F_CHECK_ACCOUNT_EXISTS:
   
   Run F_Check_Account_Exists function with an INVALID userid is active and will be run.
   Run F_Check_Account_Exists function with a VALID userid is active and will be run.
   Run F_Check_Account_Exists function with a NULL userid is active and will be run.
   */
   PROCEDURE Q##F_CREATE_ACCOUNT;
   /*
   Test cases defined for F_CREATE_ACCOUNT:
   
   Run F_Create_Account function with a NULL or INVALID userid is active and will be run.
   Run F_Create_Account function with a NEW userid and INVALID profile is active and will be run.
   Run F_Create_Account function with a NEW userid and VALID profile and INVALID password is active and will be run.
   Run F_Create_Account function with a NEW userid and VALID profile and VALID password is active and will be run.
   Run F_Create_Account function with a Existing userid is active and will be run.
   */
   PROCEDURE Q##F_ASSIGN_ROLES;
   /*
   Test cases defined for F_ASSIGN_ROLES:
   
   Run F_Assign_Roles function with an INVALID or NULL userid is active and will be run.
   Run F_Assign_Roles function with a VALID userid and an INVALID role is active and will be run.
   Run F_Assign_Roles function with a VALID userid and a VALID role is active and will be run.
   Run F_Assign_Roles function with a Service Account userid is active and will be run.
   */
   END "Q##SSI_AVATIER_ID_ENFORCER";

/


CREATE OR REPLACE PACKAGE BODY           "Q##SSI_AVATIER_ID_ENFORCER"
/*
| Automated Test Package for SSI_AVATIER_ID_ENFORCER
|
| Generated by Quest Code Tester for Oracle.
| Visit the user community at http://www.toadworld.com/products/code-tester/default.aspx
| Generated on 2019-11-10T18:26:58
*/
IS
/* Global variables for dyn TC execution, timings and SQL status. */
c_two_quotes CONSTANT CHAR(1) := '''';
Q##start_time NUMBER;
Q##end_time NUMBER;
Q##sql_rowcount PLS_INTEGER; -- for SQL%ROWCOUNT
g_pre_ut_hook_exists BOOLEAN := qu_config.my_codetester_exists ('PRE_UNIT_TEST');
g_post_ut_hook_exists BOOLEAN := qu_config.my_codetester_exists ('POST_UNIT_TEST');
g_pre_tc_hook_exists BOOLEAN := qu_config.my_codetester_exists ('PRE_TEST_CASE');
g_post_tc_hook_exists BOOLEAN := qu_config.my_codetester_exists ('POST_TEST_CASE');
PROCEDURE qcto#report_result  (
      result_guid_in   IN   VARCHAR2
    , status_in        IN   VARCHAR2
    , description_in   IN   VARCHAR2
   )
IS
BEGIN
   IF status_in = 'RUNTIME-ERROR' THEN
      qu_runtime.trace ('runtime_error running test for guid ' || result_guid_in, SQLERRM, TRUE);
      qu_runtime.trace ('runtime_error running test description', description_in, TRUE);
   END IF;
   qu_result_xp.set_result (
      result_universal_id_in => result_guid_in
    , harness_guid_in => qu_test.current_harness_guid
    , result_status_in => status_in
    , description_in => description_in
    , display_sequence_in => qu_test.current_display_sequence);
END qcto#report_result;
PROCEDURE qcto#report_result  (
      result_guid_in   IN   VARCHAR2
    , status_in        IN   VARCHAR2
    , description_in   IN   VARCHAR2
    , universal_id_out OUT VARCHAR2
   )
IS
BEGIN
   IF status_in = 'RUNTIME-ERROR' THEN
      qu_runtime.trace ('runtime_error running test for guid ' || result_guid_in, SQLERRM, TRUE);
      qu_runtime.trace ('runtime_error running test description', description_in, TRUE);
   END IF;
   qu_result_xp.set_result (
      result_universal_id_in => result_guid_in
    , harness_guid_in => qu_test.current_harness_guid
    , result_status_in => status_in
    , description_in => description_in
    , display_sequence_in => qu_test.current_display_sequence
    , universal_id_out => universal_id_out);
END qcto#report_result;FUNCTION qcto#error_info RETURN VARCHAR2 IS
   l_stack VARCHAR2(32767);
BEGIN
   BEGIN
      EXECUTE IMMEDIATE
        'BEGIN :val := SUBSTR (''PL/SQL Error Backtrace: ''
             || CHR(10) || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 1, 4000); END;'
      USING OUT l_stack;
   EXCEPTION
      WHEN OTHERS THEN l_stack := DBMS_UTILITY.FORMAT_CALL_STACK;
   END;
   RETURN SUBSTR (DBMS_UTILITY.FORMAT_ERROR_STACK || CHR(10) || l_stack, 1, 4000);
END qcto#error_info;
PROCEDURE qcto#assert_this (
   outcome_guid_in   IN   VARCHAR2
 , msg_in            IN   VARCHAR2
 , check_this_in     IN   BOOLEAN
 , null_ok_in        IN   BOOLEAN := FALSE
 , raise_exc_in      IN   BOOLEAN := FALSE
)
IS
BEGIN
   IF NOT check_this_in OR ( check_this_in IS NULL AND NOT null_ok_in )
   THEN
      qcto#report_result ( outcome_guid_in, 'FAILURE', msg_in );
      IF raise_exc_in THEN RAISE PROGRAM_ERROR; END IF;
   ELSE
      qcto#report_result ( outcome_guid_in, 'SUCCESS', msg_in );
   END IF;
END qcto#assert_this;
PROCEDURE qcto#assert_this (
   outcome_guid_in   IN   VARCHAR2
 , msg_in            IN   VARCHAR2
 , check_this_in     IN   BOOLEAN
 , null_ok_in        IN   BOOLEAN := FALSE
 , raise_exc_in      IN   BOOLEAN := FALSE
 , universal_id_out   OUT  VARCHAR2
)
IS
BEGIN
   IF NOT check_this_in OR ( check_this_in IS NULL AND NOT null_ok_in )
   THEN
      qcto#report_result ( outcome_guid_in, 'FAILURE', msg_in, universal_id_out );
      IF raise_exc_in THEN RAISE PROGRAM_ERROR; END IF;
   ELSE
      qcto#report_result ( outcome_guid_in, 'SUCCESS', msg_in, universal_id_out );
   END IF;
END qcto#assert_this;
PROCEDURE qcto#assert_null (
   outcome_guid_in   IN   VARCHAR2
 , is_null_in        IN   BOOLEAN
 , check_type_in     IN   VARCHAR2
 , raise_exc_in      IN   BOOLEAN DEFAULT FALSE
 , add_to_message_in IN   VARCHAR2 DEFAULT NULL 
)
IS
   l_message VARCHAR2(32767);
BEGIN
   l_message := 
      CASE WHEN is_null_in THEN 'Value is NULL' ELSE 'Value is NOT NULL' END
      ||
      CASE WHEN add_to_message_in IS NOT NULL THEN ': ' || SUBSTR (add_to_message_in, 1, 32000) ELSE NULL END
      ;
   qcto#report_result ( outcome_guid_in
                      , CASE
                           WHEN is_null_in AND check_type_in = 'IS-NULL' THEN 'SUCCESS'
                           WHEN NOT is_null_in AND check_type_in = 'NOT-IS-NULL' THEN 'SUCCESS'
                           ELSE 'FAILURE'
                        END
                      , l_message
                      );
   IF raise_exc_in
   THEN
      RAISE PROGRAM_ERROR;
   END IF;
END qcto#assert_null;

PROCEDURE qcto#assert_null (
   outcome_guid_in   IN   VARCHAR2
 , is_null_in        IN   BOOLEAN
 , check_type_in     IN   VARCHAR2
 , raise_exc_in      IN   BOOLEAN 
 , add_to_message_in IN   BOOLEAN  
)
IS
BEGIN
   qcto#assert_null (
   outcome_guid_in   
 , is_null_in        
 , check_type_in     
 , raise_exc_in      
 , QU_CONFIG.BOOL2VC ( add_to_message_in ) 
);
END qcto#assert_null;

FUNCTION qcto#hash (string_in in VARCHAR2) RETURN PLS_INTEGER
IS BEGIN
   RETURN DBMS_UTILITY.get_hash_value (string_in, 1, 2 ** 31 - 1);
END qcto#hash;

FUNCTION qcto#skip_tc (guid_in IN VARCHAR2) RETURN BOOLEAN
IS
   /* TRUE if list is inclusive, FALSE otherwise. */
   l_including boolean := Q##skip_tc_execution('INCLUDE');
BEGIN
   IF Q##skip_tc_execution.COUNT <= 1 THEN
      /* Only the default INCLUDE indicator row is present. */                                     
      RETURN FALSE;
   ELSIF Q##skip_tc_execution.EXISTS (guid_in) THEN
      /* User specified this element, so skip it if non-inclusive list. */                                    
      RETURN NOT l_including;
   ELSE
      /* Guid was not among those specified. If list is inclusive,
         then we skip this. If exclusive, then we include it. */
      RETURN l_including;
   END IF;
END qcto#skip_tc;

/* Set of fp_to_string functions */
FUNCTION fp_to_string(value_in IN BINARY_DOUBLE)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in) END;
   RETURN l_string;
END fp_to_string;

FUNCTION fp_to_string(value_in IN BINARY_FLOAT)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in) END;
   RETURN l_string;
END fp_to_string;

FUNCTION fp_to_string(value_in IN INTERVAL DAY TO SECOND)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in) END;
   RETURN l_string;
END fp_to_string;

FUNCTION fp_to_string(value_in IN INTERVAL YEAR TO MONTH)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in) END;
   RETURN l_string;
END fp_to_string;

FUNCTION fp_to_string(value_in IN TIMESTAMP WITH LOCAL TIME ZONE)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in, 'YYYY-MM-DD HH24:MI:SS.FF TZR TZD') END;
   RETURN l_string;
END fp_to_string;

FUNCTION fp_to_string(value_in IN TIMESTAMP WITH TIME ZONE)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in, 'YYYY-MM-DD HH24:MI:SS.FF TZR TZD') END;
   RETURN l_string;
END fp_to_string;

FUNCTION fp_to_string(value_in IN OUT NOCOPY CLOB)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE 
                  WHEN value_in IS NULL THEN NULL 
                  ELSE 
                     CASE 
                        WHEN LENGTH(value_in) <= qu_config.c_part_to_display THEN value_in 
                        ELSE SUBSTR(value_in, 1, qu_config.c_part_to_display ) || '...' 
                     END 
               END;
   RETURN l_string;
END fp_to_string;

FUNCTION fp_to_string(value_in IN TIMESTAMP)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in, 'YYYY-MM-DD HH24:MI:SS.FF') END;
   RETURN l_string;
END fp_to_string;

FUNCTION fp_to_string(value_in IN DATE)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in, 'YYYY-MM-DD HH24:MI:SS') END;
   RETURN l_string;
END fp_to_string;

FUNCTION fp_to_string(value_in IN BINARY_INTEGER)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in) END;
   RETURN l_string;
END fp_to_string;

FUNCTION fp_to_string(value_in IN VARCHAR2)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE 
                  WHEN value_in IS NULL THEN NULL 
                  ELSE 
                     CASE 
                        WHEN LENGTH(value_in) <= qu_config.c_part_to_display THEN value_in 
                        ELSE SUBSTR(value_in, 1, qu_config.c_part_to_display) || '...' 
                     END 
               END;
   RETURN l_string;
END fp_to_string;

/* This BLOB version always should be after VARCHAR2 one */
FUNCTION fp_to_string (value_in IN OUT NOCOPY BLOB)
   RETURN VARCHAR2
IS
   l_raw_val   RAW (32767);
   retval      VARCHAR2 (32767);
BEGIN
   IF value_in IS NOT NULL
   THEN
      l_raw_val := DBMS_LOB.SUBSTR (value_in, qu_config.c_part_to_display, 1);
      retval := CASE
                   WHEN qu_config.blob_as_string
                   THEN
                      UTL_RAW.cast_to_varchar2 (l_raw_val)
                   || CASE WHEN DBMS_LOB.getlength (value_in) > qu_config.c_part_to_display THEN '...' ELSE NULL END
                   ELSE
                      fp_to_string (RAWTOHEX (l_raw_val))
                END;
   END IF;

   RETURN retval;
END fp_to_string;

FUNCTION fp_to_string(value_in IN NUMBER)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in) END;
   RETURN l_string;
END fp_to_string;

FUNCTION fp_to_string(value_in IN BOOLEAN)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE CASE value_in WHEN TRUE THEN 'TRUE' WHEN FALSE THEN 'FALSE' END END;
   RETURN l_string;
END fp_to_string;

/* Set of exp_to_string functions */
FUNCTION exp_to_string(value_in IN BINARY_DOUBLE)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in) END;
   RETURN l_string;
END exp_to_string;

FUNCTION exp_to_string(value_in IN BINARY_FLOAT)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
   BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in) END;
   RETURN l_string;
END exp_to_string;

FUNCTION exp_to_string(value_in IN INTERVAL DAY TO SECOND)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in) END;
   RETURN l_string;
END exp_to_string;

FUNCTION exp_to_string(value_in IN INTERVAL YEAR TO MONTH)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in) END;
   RETURN l_string;
END exp_to_string;

FUNCTION exp_to_string(value_in IN TIMESTAMP WITH LOCAL TIME ZONE)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in, 'YYYY-MM-DD HH24:MI:SS.FF TZR TZD') END;
   RETURN l_string;
END exp_to_string;

FUNCTION exp_to_string(value_in IN TIMESTAMP WITH TIME ZONE)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in, 'YYYY-MM-DD HH24:MI:SS.FF TZR TZD') END;
   RETURN l_string;
END exp_to_string;

FUNCTION exp_to_string(value_in IN CLOB)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE CASE WHEN LENGTH(value_in) <= qu_config.c_part_to_display THEN value_in ELSE SUBSTR(value_in, 1, qu_config.c_part_to_display) || '...' END END;
   RETURN l_string;
END exp_to_string;

FUNCTION exp_to_string(value_in IN TIMESTAMP)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in, 'YYYY-MM-DD HH24:MI:SS.FF') END;
   RETURN l_string;
END exp_to_string;

FUNCTION exp_to_string(value_in IN DATE)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in, 'YYYY-MM-DD HH24:MI:SS') END;
   RETURN l_string;
END exp_to_string;

FUNCTION exp_to_string(value_in IN BINARY_INTEGER)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in) END;
   RETURN l_string;
END exp_to_string;

FUNCTION exp_to_string(value_in IN VARCHAR2)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE CASE WHEN LENGTH(value_in) <= 450 THEN value_in ELSE SUBSTR(value_in, 1, 450) || '...' END END;
   RETURN l_string;
END exp_to_string;

/* This BLOB version always should be after VARCHAR2 one */
FUNCTION exp_to_string (value_in IN OUT NOCOPY BLOB)
   RETURN VARCHAR2
IS
   l_raw_val   RAW (32767);
   retval      VARCHAR2 (32767);
BEGIN
   IF value_in IS NOT NULL
   THEN
      l_raw_val := DBMS_LOB.SUBSTR (value_in, qu_config.c_part_to_display, 1);
      retval := CASE
                   WHEN qu_config.blob_as_string
                   THEN
                      UTL_RAW.cast_to_varchar2 (l_raw_val)
                   || CASE WHEN DBMS_LOB.getlength (value_in) > qu_config.c_part_to_display THEN '...' ELSE NULL END
                   ELSE
                      exp_to_string (RAWTOHEX (l_raw_val))
                END;
   END IF;

   RETURN retval;
END exp_to_string;

FUNCTION exp_to_string(value_in IN NUMBER)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE TO_CHAR(value_in) END;
   RETURN l_string;
END exp_to_string;

FUNCTION exp_to_string(value_in IN BOOLEAN)
   RETURN VARCHAR2
IS
   l_string VARCHAR2(32767);
BEGIN
   l_string := CASE WHEN value_in IS NULL THEN NULL ELSE CASE value_in WHEN TRUE THEN 'TRUE' WHEN FALSE THEN 'FALSE' END END;
   RETURN l_string;
END exp_to_string;
   PROCEDURE Q##setup IS
   BEGIN
   NULL; END Q##setup;
   PROCEDURE Q##teardown IS
   BEGIN
   NULL; END Q##teardown;
   PROCEDURE Q##F_CHECK_ACCOUNT_EXISTS
   /* Unit test procedure for F_CHECK_ACCOUNT_EXISTS
Unit test for "F_CHECK_ACCOUNT_EXISTS"
 */
   IS
   PROCEDURE Q##RUN_F_CHECK_ACCOUNT_EXISTS_
   /* Test case name: Run F_Check_Account_Exists function with an INVALID userid */
   IS
   /* The return value of the function */
   Q##FUNCTION_RETURN_VALUE NUMBER;
   gtc_tore_down BOOLEAN;
   tc_result_guid VARCHAR2(32767);
    /* Declarations for parameters and OT attributes if present*/
   I_P_USERID VARCHAR2(32767);
   /* Variables needed for dynamic test case execution */
   l_min_count PLS_INTEGER;
   /* Needed for inputs to program */
   /* Arrays needed for multiple outcomes from program */
   /* 2. Call generate_setup LK 2.1.1*/
         PROCEDURE setup IS
         BEGIN
         gtc_tore_down := FALSE;
         IF qu_result_xp.rolling_back_before ('Y') THEN ROLLBACK;  END IF;
         
         END setup;
         /* 3. Call generate_teardown LK 2.1.1*/
         PROCEDURE teardown IS
         BEGIN
         IF gtc_tore_down THEN NULL; ELSE gtc_tore_down := TRUE;
         /* Input teardown, including individual OT attribute teardown */
         
         IF qu_result_xp.rolling_back_after ('Y') THEN ROLLBACK;  END IF;
          END IF; END teardown;
         /* 4. Call generate_set_in_values LK 2.1.1*/
         PROCEDURE set_in_values
         IS BEGIN 
         /* Assign values to inputs for program execution. */
i_P_USERID := 'CJT%RCTYFVSv';
         
          NULL;
         END set_in_values;
         /* 5. Call generate_program_call LK 2.1.1*/

PROCEDURE call_the_program IS
PROCEDURE add_input_values (tc_result_guid_in IN VARCHAR2) IS BEGIN NULL;
qu_result_xp.add_input (tc_result_guid_in, '{D0CCC793-E6A3-496D-BEE9-F1715BA5E25E}', 'P_USERID', i_P_USERID, 1); 
qu_result_xp.save_argval ('P_USERID', i_P_USERID);
 END add_input_values;
PROCEDURE save_outarg_values (tc_result_guid_in IN VARCHAR2) IS BEGIN
  /* In case there are no scalar OUT arguments. */ NULL;
 END save_outarg_values;
PROCEDURE check_non_exc_outcomes
IS
PROCEDURE check_oc_2079274353 IS 
/* Declarations for Outcomes */
E_FUNCTION_RETURN_VALUE NUMBER;
BEGIN
  /* Outcome Reference Information: 
     Unit Test: F_CHECK_ACCOUNT_EXISTS (Function)-{89938D93-0D76-2B7A-E054-002128953FC8}
     Test Case: Run F_Check_Account_Exists function with an INVALID userid-{89938D93-0D9B-2B7A-E054-002128953FC8}
     Outcome: [Function return value] - Scalar is equal to the expected value?-{D546175E-78D4-4D92-A9A3-3E3CC08B9C9E} */
 qu_result_xp.set_current_oc ('{D546175E-78D4-4D92-A9A3-3E3CC08B9C9E}');
 e_Function_return_value := '0';
/* Copy OUT argument to variable for use in assertion code. */
/*NAMEDNOTREF*/Q##function_return_value := Q##FUNCTION_RETURN_VALUE;
 /* Assertion code for outcome {D546175E-78D4-4D92-A9A3-3E3CC08B9C9E} */
DECLARE
   cv sys_refcursor;
   l_fp_value NUMBER ;
   l_exp_value NUMBER := e_Function_return_value;
   
      l_result BOOLEAN DEFAULT TRUE;
   l_message VARCHAR2(32767);
   l_dummy PLS_INTEGER;
   FUNCTION fp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END fp_to_string;
   FUNCTION exp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END exp_to_string;
BEGIN
   l_fp_value := Q##function_return_value;
      
   

    
   
   IF    l_fp_value IS NULL OR l_exp_value IS NULL
   THEN
      l_result :=  l_fp_value IS NULL AND l_exp_value IS NULL;
   ELSE
      l_result := l_fp_value = l_exp_value;
      IF l_result IS NULL THEN l_result := FALSE; END IF;
   END IF;
   
   
   
   
   
   l_message :=
        ' From Program Value of '
      || CASE WHEN l_fp_value IS NULL THEN 'NULL' ELSE '"' || fp_to_string(l_fp_value) || '" ' END
      || CASE WHEN l_result THEN '=' ELSE NVL('<>', 'NOT ' || '=') END
      || ' Expected Value '
      || CASE WHEN l_exp_value IS NULL THEN 'NULL' ELSE '"' || exp_to_string(l_exp_value) || '"' END;
   qcto#assert_this ( outcome_guid_in => qu_result_xp.current_outcome()
        , msg_in => l_message
        , check_this_in => l_result
        , null_ok_in    => FALSE
        , raise_exc_in  => FALSE
        );
EXCEPTION
   WHEN OTHERS THEN
      -- Report the failure.
      qcto#report_result (
          result_guid_in => qu_result_xp.current_outcome()
         ,status_in => 'RUNTIME-ERROR'
         ,description_in => qcto#error_info
      );      
END;
END check_oc_2079274353;
BEGIN
check_oc_2079274353();
NULL;/* Ensure compilability */
END check_non_exc_outcomes;
BEGIN
tc_result_guid := qu_result_xp.guid_for_key_info (result_guid_in =>qu_result_xp.current_test_case (), iteration_in => qu_result_xp.c_template_iteration);
add_input_values (tc_result_guid);
IF qu_result_xp.profiling_enabled THEN 
qu_result_xp.start_profiling (unit_name_in => 'F_CHECK_ACCOUNT_EXISTS', test_case_guid_in => qu_result_xp.current_test_case, test_case_name_in => 'Run F_Check_Account_Exists function with an INVALID userid', test_case_iteration_in => 0);
END IF;
  /* Capture start time. */
Q##start_time := DBMS_UTILITY.GET_TIME;
Q##FUNCTION_RETURN_VALUE :=
"AVATIER"."SSI_AVATIER_ID_ENFORCER"."F_CHECK_ACCOUNT_EXISTS"(
P_USERID => i_P_USERID
);
/* START POST EXECUTION CONTENT */
IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
Q##end_time := DBMS_UTILITY.GET_TIME;
save_outarg_values(tc_result_guid);
  /* Get numbers of rows modified by last SQL statement. */
Q##sql_rowcount := SQL%ROWCOUNT;
/* END POST EXECUTION CONTENT */
check_non_exc_outcomes( );
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
END call_the_program;
         /* 6. Call generate_exec_section LK 2.1.1*/
         BEGIN
         qu_result_xp.set_current_tc ('{89938D93-0D9B-2B7A-E054-002128953FC8}');
         if g_pre_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('PRE_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CHECK_ACCOUNT_EXISTS','','Run F_Check_Account_Exists function with an INVALID userid'); end if;
         qu_result_xp.mark_start (qu_result_xp.current_test_case);
         setup();
         set_in_values;
         call_the_program ();
         teardown;
         if g_post_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('POST_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CHECK_ACCOUNT_EXISTS','','Run F_Check_Account_Exists function with an INVALID userid'); end if;
         qu_result_xp.mark_end (qu_result_xp.current_test_case);
         /* 7. Call generate_end_of_program LK 2.1.1*/
         /* Exception outcomes trapping for incorrect invocation of subprogram. */
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
         END Q##RUN_F_CHECK_ACCOUNT_EXISTS_;
         PROCEDURE Q##RUN_F_CHECK_ACCOUNT_EXIST_1
         /* Test case name: Run F_Check_Account_Exists function with a VALID userid */
         IS
         /* The return value of the function */
         Q##FUNCTION_RETURN_VALUE NUMBER;
         gtc_tore_down BOOLEAN;
         tc_result_guid VARCHAR2(32767);
          /* Declarations for parameters and OT attributes if present*/
         I_P_USERID VARCHAR2(32767);
         /* Variables needed for dynamic test case execution */
         l_min_count PLS_INTEGER;
         /* Needed for inputs to program */
         /* Arrays needed for multiple outcomes from program */
         /* 2. Call generate_setup LK 2.1.1*/
         PROCEDURE setup IS
         BEGIN
         gtc_tore_down := FALSE;
         IF qu_result_xp.rolling_back_before ('Y') THEN ROLLBACK;  END IF;
         
         END setup;
         /* 3. Call generate_teardown LK 2.1.1*/
         PROCEDURE teardown IS
         BEGIN
         IF gtc_tore_down THEN NULL; ELSE gtc_tore_down := TRUE;
         /* Input teardown, including individual OT attribute teardown */
         
         IF qu_result_xp.rolling_back_after ('Y') THEN ROLLBACK;  END IF;
          END IF; END teardown;
         /* 4. Call generate_set_in_values LK 2.1.1*/
         PROCEDURE set_in_values
         IS BEGIN 
         /* Assign values to inputs for program execution. */
i_P_USERID := 'rsuravar';
         
          NULL;
         END set_in_values;
         /* 5. Call generate_program_call LK 2.1.1*/

PROCEDURE call_the_program IS
PROCEDURE add_input_values (tc_result_guid_in IN VARCHAR2) IS BEGIN NULL;
qu_result_xp.add_input (tc_result_guid_in, '{D6131278-6CB4-42AB-ABFE-DE7FAF22D506}', 'P_USERID', i_P_USERID, 1); 
qu_result_xp.save_argval ('P_USERID', i_P_USERID);
 END add_input_values;
PROCEDURE save_outarg_values (tc_result_guid_in IN VARCHAR2) IS BEGIN
  /* In case there are no scalar OUT arguments. */ NULL;
 END save_outarg_values;
PROCEDURE check_non_exc_outcomes
IS
PROCEDURE check_oc_764557630 IS 
/* Declarations for Outcomes */
E_FUNCTION_RETURN_VALUE NUMBER;
BEGIN
  /* Outcome Reference Information: 
     Unit Test: F_CHECK_ACCOUNT_EXISTS (Function)-{89938D93-0D76-2B7A-E054-002128953FC8}
     Test Case: Run F_Check_Account_Exists function with a VALID userid-{89938D93-0D9C-2B7A-E054-002128953FC8}
     Outcome: [Function return value] - Scalar is equal to the expected value?-{CDC082FD-8E15-4C15-98E4-4AED1434F40B} */
 qu_result_xp.set_current_oc ('{CDC082FD-8E15-4C15-98E4-4AED1434F40B}');
 e_Function_return_value := '1';
/* Copy OUT argument to variable for use in assertion code. */
/*NAMEDNOTREF*/Q##function_return_value := Q##FUNCTION_RETURN_VALUE;
 /* Assertion code for outcome {CDC082FD-8E15-4C15-98E4-4AED1434F40B} */
DECLARE
   cv sys_refcursor;
   l_fp_value NUMBER ;
   l_exp_value NUMBER := e_Function_return_value;
   
      l_result BOOLEAN DEFAULT TRUE;
   l_message VARCHAR2(32767);
   l_dummy PLS_INTEGER;
   FUNCTION fp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END fp_to_string;
   FUNCTION exp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END exp_to_string;
BEGIN
   l_fp_value := Q##function_return_value;
      
   

    
   
   IF    l_fp_value IS NULL OR l_exp_value IS NULL
   THEN
      l_result :=  l_fp_value IS NULL AND l_exp_value IS NULL;
   ELSE
      l_result := l_fp_value = l_exp_value;
      IF l_result IS NULL THEN l_result := FALSE; END IF;
   END IF;
   
   
   
   
   
   l_message :=
        ' From Program Value of '
      || CASE WHEN l_fp_value IS NULL THEN 'NULL' ELSE '"' || fp_to_string(l_fp_value) || '" ' END
      || CASE WHEN l_result THEN '=' ELSE NVL('<>', 'NOT ' || '=') END
      || ' Expected Value '
      || CASE WHEN l_exp_value IS NULL THEN 'NULL' ELSE '"' || exp_to_string(l_exp_value) || '"' END;
   qcto#assert_this ( outcome_guid_in => qu_result_xp.current_outcome()
        , msg_in => l_message
        , check_this_in => l_result
        , null_ok_in    => FALSE
        , raise_exc_in  => FALSE
        );
EXCEPTION
   WHEN OTHERS THEN
      -- Report the failure.
      qcto#report_result (
          result_guid_in => qu_result_xp.current_outcome()
         ,status_in => 'RUNTIME-ERROR'
         ,description_in => qcto#error_info
      );      
END;
END check_oc_764557630;
BEGIN
check_oc_764557630();
NULL;/* Ensure compilability */
END check_non_exc_outcomes;
BEGIN
tc_result_guid := qu_result_xp.guid_for_key_info (result_guid_in =>qu_result_xp.current_test_case (), iteration_in => qu_result_xp.c_template_iteration);
add_input_values (tc_result_guid);
IF qu_result_xp.profiling_enabled THEN 
qu_result_xp.start_profiling (unit_name_in => 'F_CHECK_ACCOUNT_EXISTS', test_case_guid_in => qu_result_xp.current_test_case, test_case_name_in => 'Run F_Check_Account_Exists function with a VALID userid', test_case_iteration_in => 0);
END IF;
  /* Capture start time. */
Q##start_time := DBMS_UTILITY.GET_TIME;
Q##FUNCTION_RETURN_VALUE :=
"AVATIER"."SSI_AVATIER_ID_ENFORCER"."F_CHECK_ACCOUNT_EXISTS"(
P_USERID => i_P_USERID
);
/* START POST EXECUTION CONTENT */
IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
Q##end_time := DBMS_UTILITY.GET_TIME;
save_outarg_values(tc_result_guid);
  /* Get numbers of rows modified by last SQL statement. */
Q##sql_rowcount := SQL%ROWCOUNT;
/* END POST EXECUTION CONTENT */
check_non_exc_outcomes( );
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
END call_the_program;
         /* 6. Call generate_exec_section LK 2.1.1*/
         BEGIN
         qu_result_xp.set_current_tc ('{89938D93-0D9C-2B7A-E054-002128953FC8}');
         if g_pre_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('PRE_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CHECK_ACCOUNT_EXISTS','','Run F_Check_Account_Exists function with a VALID userid'); end if;
         qu_result_xp.mark_start (qu_result_xp.current_test_case);
         setup();
         set_in_values;
         call_the_program ();
         teardown;
         if g_post_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('POST_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CHECK_ACCOUNT_EXISTS','','Run F_Check_Account_Exists function with a VALID userid'); end if;
         qu_result_xp.mark_end (qu_result_xp.current_test_case);
         /* 7. Call generate_end_of_program LK 2.1.1*/
         /* Exception outcomes trapping for incorrect invocation of subprogram. */
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
         END Q##RUN_F_CHECK_ACCOUNT_EXIST_1;
         PROCEDURE Q##_NEW_TEST_CASE_NAME_
         /* Test case name: Run F_Check_Account_Exists function with a NULL userid */
         IS
         /* The return value of the function */
         Q##FUNCTION_RETURN_VALUE NUMBER;
         gtc_tore_down BOOLEAN;
         tc_result_guid VARCHAR2(32767);
          /* Declarations for parameters and OT attributes if present*/
         I_P_USERID VARCHAR2(32767);
         /* Variables needed for dynamic test case execution */
         l_min_count PLS_INTEGER;
         /* Needed for inputs to program */
         /* Arrays needed for multiple outcomes from program */
         /* 2. Call generate_setup LK 2.1.1*/
         PROCEDURE setup IS
         BEGIN
         gtc_tore_down := FALSE;
         IF qu_result_xp.rolling_back_before ('Y') THEN ROLLBACK;  END IF;
         
         END setup;
         /* 3. Call generate_teardown LK 2.1.1*/
         PROCEDURE teardown IS
         BEGIN
         IF gtc_tore_down THEN NULL; ELSE gtc_tore_down := TRUE;
         /* Input teardown, including individual OT attribute teardown */
         
         IF qu_result_xp.rolling_back_after ('Y') THEN ROLLBACK;  END IF;
          END IF; END teardown;
         /* 4. Call generate_set_in_values LK 2.1.1*/
         PROCEDURE set_in_values
         IS BEGIN 
         /* Assign values to inputs for program execution. */
          NULL;
         END set_in_values;
         /* 5. Call generate_program_call LK 2.1.1*/

PROCEDURE call_the_program IS
PROCEDURE add_input_values (tc_result_guid_in IN VARCHAR2) IS BEGIN NULL;
qu_result_xp.add_input (tc_result_guid_in, '{13F325BC-1EE7-4D05-B99A-1FCEB062855B}', 'P_USERID', i_P_USERID, 1); 
qu_result_xp.save_argval ('P_USERID', i_P_USERID);
 END add_input_values;
PROCEDURE save_outarg_values (tc_result_guid_in IN VARCHAR2) IS BEGIN
  /* In case there are no scalar OUT arguments. */ NULL;
 END save_outarg_values;
PROCEDURE check_non_exc_outcomes
IS
PROCEDURE check_oc_2016662812 IS 
/* Declarations for Outcomes */
E_FUNCTION_RETURN_VALUE NUMBER;
BEGIN
  /* Outcome Reference Information: 
     Unit Test: F_CHECK_ACCOUNT_EXISTS (Function)-{89938D93-0D76-2B7A-E054-002128953FC8}
     Test Case: Run F_Check_Account_Exists function with a NULL userid-{89938D93-0D9A-2B7A-E054-002128953FC8}
     Outcome: [Function return value] - Scalar is equal to the expected value?-{8FC46950-3266-4AD4-9EE9-0035FBB60DD8} */
 qu_result_xp.set_current_oc ('{8FC46950-3266-4AD4-9EE9-0035FBB60DD8}');
 e_Function_return_value := '0';
/* Copy OUT argument to variable for use in assertion code. */
/*NAMEDNOTREF*/Q##function_return_value := Q##FUNCTION_RETURN_VALUE;
 /* Assertion code for outcome {8FC46950-3266-4AD4-9EE9-0035FBB60DD8} */
DECLARE
   cv sys_refcursor;
   l_fp_value NUMBER ;
   l_exp_value NUMBER := e_Function_return_value;
   
      l_result BOOLEAN DEFAULT TRUE;
   l_message VARCHAR2(32767);
   l_dummy PLS_INTEGER;
   FUNCTION fp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END fp_to_string;
   FUNCTION exp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END exp_to_string;
BEGIN
   l_fp_value := Q##function_return_value;
      
   

    
   
   IF    l_fp_value IS NULL OR l_exp_value IS NULL
   THEN
      l_result :=  l_fp_value IS NULL AND l_exp_value IS NULL;
   ELSE
      l_result := l_fp_value = l_exp_value;
      IF l_result IS NULL THEN l_result := FALSE; END IF;
   END IF;
   
   
   
   
   
   l_message :=
        ' From Program Value of '
      || CASE WHEN l_fp_value IS NULL THEN 'NULL' ELSE '"' || fp_to_string(l_fp_value) || '" ' END
      || CASE WHEN l_result THEN '=' ELSE NVL('<>', 'NOT ' || '=') END
      || ' Expected Value '
      || CASE WHEN l_exp_value IS NULL THEN 'NULL' ELSE '"' || exp_to_string(l_exp_value) || '"' END;
   qcto#assert_this ( outcome_guid_in => qu_result_xp.current_outcome()
        , msg_in => l_message
        , check_this_in => l_result
        , null_ok_in    => FALSE
        , raise_exc_in  => FALSE
        );
EXCEPTION
   WHEN OTHERS THEN
      -- Report the failure.
      qcto#report_result (
          result_guid_in => qu_result_xp.current_outcome()
         ,status_in => 'RUNTIME-ERROR'
         ,description_in => qcto#error_info
      );      
END;
END check_oc_2016662812;
BEGIN
check_oc_2016662812();
NULL;/* Ensure compilability */
END check_non_exc_outcomes;
BEGIN
tc_result_guid := qu_result_xp.guid_for_key_info (result_guid_in =>qu_result_xp.current_test_case (), iteration_in => qu_result_xp.c_template_iteration);
add_input_values (tc_result_guid);
IF qu_result_xp.profiling_enabled THEN 
qu_result_xp.start_profiling (unit_name_in => 'F_CHECK_ACCOUNT_EXISTS', test_case_guid_in => qu_result_xp.current_test_case, test_case_name_in => 'Run F_Check_Account_Exists function with a NULL userid', test_case_iteration_in => 0);
END IF;
  /* Capture start time. */
Q##start_time := DBMS_UTILITY.GET_TIME;
Q##FUNCTION_RETURN_VALUE :=
"AVATIER"."SSI_AVATIER_ID_ENFORCER"."F_CHECK_ACCOUNT_EXISTS"(
P_USERID => i_P_USERID
);
/* START POST EXECUTION CONTENT */
IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
Q##end_time := DBMS_UTILITY.GET_TIME;
save_outarg_values(tc_result_guid);
  /* Get numbers of rows modified by last SQL statement. */
Q##sql_rowcount := SQL%ROWCOUNT;
/* END POST EXECUTION CONTENT */
check_non_exc_outcomes( );
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
END call_the_program;
         /* 6. Call generate_exec_section LK 2.1.1*/
         BEGIN
         qu_result_xp.set_current_tc ('{89938D93-0D9A-2B7A-E054-002128953FC8}');
         if g_pre_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('PRE_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CHECK_ACCOUNT_EXISTS','','Run F_Check_Account_Exists function with a NULL userid'); end if;
         qu_result_xp.mark_start (qu_result_xp.current_test_case);
         setup();
         set_in_values;
         call_the_program ();
         teardown;
         if g_post_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('POST_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CHECK_ACCOUNT_EXISTS','','Run F_Check_Account_Exists function with a NULL userid'); end if;
         qu_result_xp.mark_end (qu_result_xp.current_test_case);
         /* 7. Call generate_end_of_program LK 2.1.1*/
         /* Exception outcomes trapping for incorrect invocation of subprogram. */
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
         END Q##_NEW_TEST_CASE_NAME_;
         BEGIN
         qu_result_xp.mark_start ('{89938D93-0D76-2B7A-E054-002128953FC8}');
         qu_result_xp.set_current_ut ('{89938D93-0D76-2B7A-E054-002128953FC8}');
         if g_pre_ut_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('PRE_UNIT_TEST','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CHECK_ACCOUNT_EXISTS',''); end if;
         DECLARE
   TYPE order_t IS TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;
   l_exec_order order_t;
         PROCEDURE run_one (seq_in IN PLS_INTEGER) IS BEGIN 
         CASE seq_in
         WHEN 2 THEN  IF NOT qcto#skip_tc ('{89938D93-0D9B-2B7A-E054-002128953FC8}') THEN Q##RUN_F_CHECK_ACCOUNT_EXISTS_; END IF;
         WHEN 3 THEN  IF NOT qcto#skip_tc ('{89938D93-0D9C-2B7A-E054-002128953FC8}') THEN Q##RUN_F_CHECK_ACCOUNT_EXIST_1; END IF;
         WHEN 1 THEN  IF NOT qcto#skip_tc ('{89938D93-0D9A-2B7A-E054-002128953FC8}') THEN Q##_NEW_TEST_CASE_NAME_; END IF;
         END CASE; END run_one; BEGIN
         /* Use order specified by tester. */
         l_exec_order(1) := 1;
         l_exec_order(2) := 2;
         l_exec_order(3) := 3;
         FOR ii IN 1 .. l_exec_order.COUNT LOOP run_one (l_exec_order(ii)); END LOOP;
         END;
         IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
         if g_post_ut_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('POST_UNIT_TEST','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CHECK_ACCOUNT_EXISTS',''); end if;
         qu_result_xp.mark_end ('{89938D93-0D76-2B7A-E054-002128953FC8}');
         EXCEPTION WHEN OTHERS THEN 
         IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
         qcto#report_result (result_guid_in => qu_result_xp.current_unit_test,status_in => 'RUNTIME-ERROR',description_in => qcto#error_info);
         
         IF qu_result_xp.rolling_back_after () THEN ROLLBACK;  END IF;
         END Q##F_CHECK_ACCOUNT_EXISTS;
         PROCEDURE Q##F_CREATE_ACCOUNT
         /* Unit test procedure for F_CREATE_ACCOUNT
Unit test for "F_CREATE_ACCOUNT"
 */
         IS
         PROCEDURE Q##RUN_F_CREATE_ACCOUNT_FUNCTI
         /* Test case name: Run F_Create_Account function with a NULL or INVALID userid */
         IS
         /* The return value of the function */
         Q##FUNCTION_RETURN_VALUE NUMBER;
         gtc_tore_down BOOLEAN;
         tc_result_guid VARCHAR2(32767);
          /* Declarations for parameters and OT attributes if present*/
         I_P_USERID VARCHAR2(32767);
         I_P_PASSWORD VARCHAR2(32767);
         I_P_PROFILE VARCHAR2(32767);
         /* Variables needed for dynamic test case execution */
         l_min_count PLS_INTEGER;
         /* Needed for inputs to program */
         /* Arrays needed for multiple outcomes from program */
         /* 2. Call generate_setup LK 2.1.1*/
         PROCEDURE setup IS
         BEGIN
         gtc_tore_down := FALSE;
         IF qu_result_xp.rolling_back_before ('Y') THEN ROLLBACK;  END IF;
         
         END setup;
         /* 3. Call generate_teardown LK 2.1.1*/
         PROCEDURE teardown IS
         BEGIN
         IF gtc_tore_down THEN NULL; ELSE gtc_tore_down := TRUE;
         /* Input teardown, including individual OT attribute teardown */
         
         IF qu_result_xp.rolling_back_after ('Y') THEN ROLLBACK;  END IF;
          END IF; END teardown;
         /* 4. Call generate_set_in_values LK 2.1.1*/
         PROCEDURE set_in_values
         IS BEGIN 
         /* Assign values to inputs for program execution. */
i_P_USERID := 'HFC^cf45cds#WX';
         
i_P_PASSWORD := 'Password$123';
         
i_P_PROFILE := 'DEVELOPER';
         
          NULL;
         END set_in_values;
         /* 5. Call generate_program_call LK 2.1.1*/

PROCEDURE call_the_program IS
PROCEDURE add_input_values (tc_result_guid_in IN VARCHAR2) IS BEGIN NULL;
qu_result_xp.add_input (tc_result_guid_in, '{4B98878B-AEF8-4ACF-9561-2F1C6146CB84}', 'P_USERID', i_P_USERID, 1); 
qu_result_xp.save_argval ('P_USERID', i_P_USERID);
qu_result_xp.add_input (tc_result_guid_in, '{DC4E0ECD-5B01-4C6F-B81A-57EFE0F4210C}', 'P_PASSWORD', i_P_PASSWORD, 2); 
qu_result_xp.save_argval ('P_PASSWORD', i_P_PASSWORD);
qu_result_xp.add_input (tc_result_guid_in, '{444F6C13-EEE9-424C-9631-47D4AD7D3D8F}', 'P_PROFILE', i_P_PROFILE, 3); 
qu_result_xp.save_argval ('P_PROFILE', i_P_PROFILE);
 END add_input_values;
PROCEDURE save_outarg_values (tc_result_guid_in IN VARCHAR2) IS BEGIN
  /* In case there are no scalar OUT arguments. */ NULL;
 END save_outarg_values;
PROCEDURE check_non_exc_outcomes
IS
PROCEDURE check_oc_965469955 IS 
/* Declarations for Outcomes */
E_FUNCTION_RETURN_VALUE NUMBER;
BEGIN
  /* Outcome Reference Information: 
     Unit Test: F_CREATE_ACCOUNT (Function)-{89938D93-0DD3-2B7A-E054-002128953FC8}
     Test Case: Run F_Create_Account function with a NULL or INVALID userid-{89938D93-0E05-2B7A-E054-002128953FC8}
     Outcome: [Function return value] - Scalar is equal to the expected value?-{E1542538-79EB-4A2A-8F38-5719A5B38C3D} */
 qu_result_xp.set_current_oc ('{E1542538-79EB-4A2A-8F38-5719A5B38C3D}');
 e_Function_return_value := '1';
/* Copy OUT argument to variable for use in assertion code. */
/*NAMEDNOTREF*/Q##function_return_value := Q##FUNCTION_RETURN_VALUE;
 /* Assertion code for outcome {E1542538-79EB-4A2A-8F38-5719A5B38C3D} */
DECLARE
   cv sys_refcursor;
   l_fp_value NUMBER ;
   l_exp_value NUMBER := e_Function_return_value;
   
      l_result BOOLEAN DEFAULT TRUE;
   l_message VARCHAR2(32767);
   l_dummy PLS_INTEGER;
   FUNCTION fp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END fp_to_string;
   FUNCTION exp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END exp_to_string;
BEGIN
   l_fp_value := Q##function_return_value;
      
   

    
   
   IF    l_fp_value IS NULL OR l_exp_value IS NULL
   THEN
      l_result :=  l_fp_value IS NULL AND l_exp_value IS NULL;
   ELSE
      l_result := l_fp_value = l_exp_value;
      IF l_result IS NULL THEN l_result := FALSE; END IF;
   END IF;
   
   
   
   
   
   l_message :=
        ' From Program Value of '
      || CASE WHEN l_fp_value IS NULL THEN 'NULL' ELSE '"' || fp_to_string(l_fp_value) || '" ' END
      || CASE WHEN l_result THEN '=' ELSE NVL('<>', 'NOT ' || '=') END
      || ' Expected Value '
      || CASE WHEN l_exp_value IS NULL THEN 'NULL' ELSE '"' || exp_to_string(l_exp_value) || '"' END;
   qcto#assert_this ( outcome_guid_in => qu_result_xp.current_outcome()
        , msg_in => l_message
        , check_this_in => l_result
        , null_ok_in    => FALSE
        , raise_exc_in  => FALSE
        );
EXCEPTION
   WHEN OTHERS THEN
      -- Report the failure.
      qcto#report_result (
          result_guid_in => qu_result_xp.current_outcome()
         ,status_in => 'RUNTIME-ERROR'
         ,description_in => qcto#error_info
      );      
END;
END check_oc_965469955;
BEGIN
check_oc_965469955();
NULL;/* Ensure compilability */
END check_non_exc_outcomes;
BEGIN
tc_result_guid := qu_result_xp.guid_for_key_info (result_guid_in =>qu_result_xp.current_test_case (), iteration_in => qu_result_xp.c_template_iteration);
add_input_values (tc_result_guid);
IF qu_result_xp.profiling_enabled THEN 
qu_result_xp.start_profiling (unit_name_in => 'F_CREATE_ACCOUNT', test_case_guid_in => qu_result_xp.current_test_case, test_case_name_in => 'Run F_Create_Account function with a NULL or INVALID userid', test_case_iteration_in => 0);
END IF;
  /* Capture start time. */
Q##start_time := DBMS_UTILITY.GET_TIME;
Q##FUNCTION_RETURN_VALUE :=
"AVATIER"."SSI_AVATIER_ID_ENFORCER"."F_CREATE_ACCOUNT"(
P_USERID => i_P_USERID
,P_PASSWORD => i_P_PASSWORD
,P_PROFILE => i_P_PROFILE
);
/* START POST EXECUTION CONTENT */
IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
Q##end_time := DBMS_UTILITY.GET_TIME;
save_outarg_values(tc_result_guid);
  /* Get numbers of rows modified by last SQL statement. */
Q##sql_rowcount := SQL%ROWCOUNT;
/* END POST EXECUTION CONTENT */
check_non_exc_outcomes( );
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
END call_the_program;
         /* 6. Call generate_exec_section LK 2.1.1*/
         BEGIN
         qu_result_xp.set_current_tc ('{89938D93-0E05-2B7A-E054-002128953FC8}');
         if g_pre_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('PRE_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CREATE_ACCOUNT','','Run F_Create_Account function with a NULL or INVALID userid'); end if;
         qu_result_xp.mark_start (qu_result_xp.current_test_case);
         setup();
         set_in_values;
         call_the_program ();
         teardown;
         if g_post_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('POST_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CREATE_ACCOUNT','','Run F_Create_Account function with a NULL or INVALID userid'); end if;
         qu_result_xp.mark_end (qu_result_xp.current_test_case);
         /* 7. Call generate_end_of_program LK 2.1.1*/
         /* Exception outcomes trapping for incorrect invocation of subprogram. */
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
         END Q##RUN_F_CREATE_ACCOUNT_FUNCTI;
         PROCEDURE Q##RUN_F_CREATE_ACCOUNT_FUNC_1
         /* Test case name: Run F_Create_Account function with a NEW userid and INVALID profile */
         IS
         /* The return value of the function */
         Q##FUNCTION_RETURN_VALUE NUMBER;
         gtc_tore_down BOOLEAN;
         tc_result_guid VARCHAR2(32767);
          /* Declarations for parameters and OT attributes if present*/
         I_P_USERID VARCHAR2(32767);
         I_P_PASSWORD VARCHAR2(32767);
         I_P_PROFILE VARCHAR2(32767);
         /* Variables needed for dynamic test case execution */
         l_min_count PLS_INTEGER;
         /* Needed for inputs to program */
         /* Arrays needed for multiple outcomes from program */
         /* 2. Call generate_setup LK 2.1.1*/
         PROCEDURE setup IS
         BEGIN
         gtc_tore_down := FALSE;
         IF qu_result_xp.rolling_back_before ('Y') THEN ROLLBACK;  END IF;
         
         END setup;
         /* 3. Call generate_teardown LK 2.1.1*/
         PROCEDURE teardown IS
         BEGIN
         IF gtc_tore_down THEN NULL; ELSE gtc_tore_down := TRUE;
         /* Input teardown, including individual OT attribute teardown */
         
         IF qu_result_xp.rolling_back_after ('Y') THEN ROLLBACK;  END IF;
          END IF; END teardown;
         /* 4. Call generate_set_in_values LK 2.1.1*/
         PROCEDURE set_in_values
         IS BEGIN 
         /* Assign values to inputs for program execution. */
i_P_USERID := 'Test01';
         
i_P_PASSWORD := 'Password$123';
         
i_P_PROFILE := 'C%fc5s4fd34ce4*&^%';
         
          NULL;
         END set_in_values;
         /* 5. Call generate_program_call LK 2.1.1*/

PROCEDURE call_the_program IS
PROCEDURE add_input_values (tc_result_guid_in IN VARCHAR2) IS BEGIN NULL;
qu_result_xp.add_input (tc_result_guid_in, '{6E02EF58-14AD-4FBC-915E-8153354C80B8}', 'P_USERID', i_P_USERID, 1); 
qu_result_xp.save_argval ('P_USERID', i_P_USERID);
qu_result_xp.add_input (tc_result_guid_in, '{DDA3BDBD-443A-4F3D-ACDB-0AE2B22688E5}', 'P_PASSWORD', i_P_PASSWORD, 2); 
qu_result_xp.save_argval ('P_PASSWORD', i_P_PASSWORD);
qu_result_xp.add_input (tc_result_guid_in, '{AE46F9DD-EA94-482A-956F-E8FA2F5A885C}', 'P_PROFILE', i_P_PROFILE, 3); 
qu_result_xp.save_argval ('P_PROFILE', i_P_PROFILE);
 END add_input_values;
PROCEDURE save_outarg_values (tc_result_guid_in IN VARCHAR2) IS BEGIN
  /* In case there are no scalar OUT arguments. */ NULL;
 END save_outarg_values;
PROCEDURE check_non_exc_outcomes
IS
PROCEDURE check_oc_1420625850 IS 
/* Declarations for Outcomes */
E_FUNCTION_RETURN_VALUE NUMBER;
BEGIN
  /* Outcome Reference Information: 
     Unit Test: F_CREATE_ACCOUNT (Function)-{89938D93-0DD3-2B7A-E054-002128953FC8}
     Test Case: Run F_Create_Account function with a NEW userid and INVALID profile-{89938D93-0E06-2B7A-E054-002128953FC8}
     Outcome: [Function return value] - Scalar is equal to the expected value?-{8D677289-4515-467E-A914-23F9943C5CD6} */
 qu_result_xp.set_current_oc ('{8D677289-4515-467E-A914-23F9943C5CD6}');
 e_Function_return_value := '1';
/* Copy OUT argument to variable for use in assertion code. */
/*NAMEDNOTREF*/Q##function_return_value := Q##FUNCTION_RETURN_VALUE;
 /* Assertion code for outcome {8D677289-4515-467E-A914-23F9943C5CD6} */
DECLARE
   cv sys_refcursor;
   l_fp_value NUMBER ;
   l_exp_value NUMBER := e_Function_return_value;
   
      l_result BOOLEAN DEFAULT TRUE;
   l_message VARCHAR2(32767);
   l_dummy PLS_INTEGER;
   FUNCTION fp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END fp_to_string;
   FUNCTION exp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END exp_to_string;
BEGIN
   l_fp_value := Q##function_return_value;
      
   

    
   
   IF    l_fp_value IS NULL OR l_exp_value IS NULL
   THEN
      l_result :=  l_fp_value IS NULL AND l_exp_value IS NULL;
   ELSE
      l_result := l_fp_value = l_exp_value;
      IF l_result IS NULL THEN l_result := FALSE; END IF;
   END IF;
   
   
   
   
   
   l_message :=
        ' From Program Value of '
      || CASE WHEN l_fp_value IS NULL THEN 'NULL' ELSE '"' || fp_to_string(l_fp_value) || '" ' END
      || CASE WHEN l_result THEN '=' ELSE NVL('<>', 'NOT ' || '=') END
      || ' Expected Value '
      || CASE WHEN l_exp_value IS NULL THEN 'NULL' ELSE '"' || exp_to_string(l_exp_value) || '"' END;
   qcto#assert_this ( outcome_guid_in => qu_result_xp.current_outcome()
        , msg_in => l_message
        , check_this_in => l_result
        , null_ok_in    => FALSE
        , raise_exc_in  => FALSE
        );
EXCEPTION
   WHEN OTHERS THEN
      -- Report the failure.
      qcto#report_result (
          result_guid_in => qu_result_xp.current_outcome()
         ,status_in => 'RUNTIME-ERROR'
         ,description_in => qcto#error_info
      );      
END;
END check_oc_1420625850;
BEGIN
check_oc_1420625850();
NULL;/* Ensure compilability */
END check_non_exc_outcomes;
BEGIN
tc_result_guid := qu_result_xp.guid_for_key_info (result_guid_in =>qu_result_xp.current_test_case (), iteration_in => qu_result_xp.c_template_iteration);
add_input_values (tc_result_guid);
IF qu_result_xp.profiling_enabled THEN 
qu_result_xp.start_profiling (unit_name_in => 'F_CREATE_ACCOUNT', test_case_guid_in => qu_result_xp.current_test_case, test_case_name_in => 'Run F_Create_Account function with a NEW userid and INVALID profile', test_case_iteration_in => 0);
END IF;
  /* Capture start time. */
Q##start_time := DBMS_UTILITY.GET_TIME;
Q##FUNCTION_RETURN_VALUE :=
"AVATIER"."SSI_AVATIER_ID_ENFORCER"."F_CREATE_ACCOUNT"(
P_USERID => i_P_USERID
,P_PASSWORD => i_P_PASSWORD
,P_PROFILE => i_P_PROFILE
);
/* START POST EXECUTION CONTENT */
IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
Q##end_time := DBMS_UTILITY.GET_TIME;
save_outarg_values(tc_result_guid);
  /* Get numbers of rows modified by last SQL statement. */
Q##sql_rowcount := SQL%ROWCOUNT;
/* END POST EXECUTION CONTENT */
check_non_exc_outcomes( );
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
END call_the_program;
         /* 6. Call generate_exec_section LK 2.1.1*/
         BEGIN
         qu_result_xp.set_current_tc ('{89938D93-0E06-2B7A-E054-002128953FC8}');
         if g_pre_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('PRE_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CREATE_ACCOUNT','','Run F_Create_Account function with a NEW userid and INVALID profile'); end if;
         qu_result_xp.mark_start (qu_result_xp.current_test_case);
         setup();
         set_in_values;
         call_the_program ();
         teardown;
         if g_post_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('POST_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CREATE_ACCOUNT','','Run F_Create_Account function with a NEW userid and INVALID profile'); end if;
         qu_result_xp.mark_end (qu_result_xp.current_test_case);
         /* 7. Call generate_end_of_program LK 2.1.1*/
         /* Exception outcomes trapping for incorrect invocation of subprogram. */
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
         END Q##RUN_F_CREATE_ACCOUNT_FUNC_1;
         PROCEDURE Q##RUN_F_CREATE_ACCOUNT_FUNC_2
         /* Test case name: Run F_Create_Account function with a NEW userid and VALID profile and INVALID password */
         IS
         /* The return value of the function */
         Q##FUNCTION_RETURN_VALUE NUMBER;
         gtc_tore_down BOOLEAN;
         tc_result_guid VARCHAR2(32767);
          /* Declarations for parameters and OT attributes if present*/
         I_P_USERID VARCHAR2(32767);
         I_P_PASSWORD VARCHAR2(32767);
         I_P_PROFILE VARCHAR2(32767);
         /* Variables needed for dynamic test case execution */
         l_min_count PLS_INTEGER;
         /* Needed for inputs to program */
         /* Arrays needed for multiple outcomes from program */
         /* 2. Call generate_setup LK 2.1.1*/
         PROCEDURE setup IS
         BEGIN
         gtc_tore_down := FALSE;
         IF qu_result_xp.rolling_back_before ('Y') THEN ROLLBACK;  END IF;
         
         END setup;
         /* 3. Call generate_teardown LK 2.1.1*/
         PROCEDURE teardown IS
         BEGIN
         IF gtc_tore_down THEN NULL; ELSE gtc_tore_down := TRUE;
         /* Input teardown, including individual OT attribute teardown */
         
         IF qu_result_xp.rolling_back_after ('Y') THEN ROLLBACK;  END IF;
          END IF; END teardown;
         /* 4. Call generate_set_in_values LK 2.1.1*/
         PROCEDURE set_in_values
         IS BEGIN 
         /* Assign values to inputs for program execution. */
i_P_USERID := 'Test01';
         
i_P_PASSWORD := 'abc';
         
i_P_PROFILE := 'DeveLoper';
         
          NULL;
         END set_in_values;
         /* 5. Call generate_program_call LK 2.1.1*/

PROCEDURE call_the_program IS
PROCEDURE add_input_values (tc_result_guid_in IN VARCHAR2) IS BEGIN NULL;
qu_result_xp.add_input (tc_result_guid_in, '{EB1D3DFA-5A53-4CAA-8FDA-1A1E4454EF71}', 'P_USERID', i_P_USERID, 1); 
qu_result_xp.save_argval ('P_USERID', i_P_USERID);
qu_result_xp.add_input (tc_result_guid_in, '{416325B8-410E-418E-84BB-0B6F6385CD78}', 'P_PASSWORD', i_P_PASSWORD, 2); 
qu_result_xp.save_argval ('P_PASSWORD', i_P_PASSWORD);
qu_result_xp.add_input (tc_result_guid_in, '{39F85B93-3166-4E84-822A-215DBC3D9EFA}', 'P_PROFILE', i_P_PROFILE, 3); 
qu_result_xp.save_argval ('P_PROFILE', i_P_PROFILE);
 END add_input_values;
PROCEDURE save_outarg_values (tc_result_guid_in IN VARCHAR2) IS BEGIN
  /* In case there are no scalar OUT arguments. */ NULL;
 END save_outarg_values;
PROCEDURE check_non_exc_outcomes
IS
PROCEDURE check_oc_2137262725 IS 
/* Declarations for Outcomes */
E_FUNCTION_RETURN_VALUE NUMBER;
BEGIN
  /* Outcome Reference Information: 
     Unit Test: F_CREATE_ACCOUNT (Function)-{89938D93-0DD3-2B7A-E054-002128953FC8}
     Test Case: Run F_Create_Account function with a NEW userid and VALID profile and INVALID password-{89938D93-0E07-2B7A-E054-002128953FC8}
     Outcome: [Function return value] - Scalar is equal to the expected value?-{E23C582B-9A58-453F-BD99-EBFEDB3425B1} */
 qu_result_xp.set_current_oc ('{E23C582B-9A58-453F-BD99-EBFEDB3425B1}');
 e_Function_return_value := '1';
/* Copy OUT argument to variable for use in assertion code. */
/*NAMEDNOTREF*/Q##function_return_value := Q##FUNCTION_RETURN_VALUE;
 /* Assertion code for outcome {E23C582B-9A58-453F-BD99-EBFEDB3425B1} */
DECLARE
   cv sys_refcursor;
   l_fp_value NUMBER ;
   l_exp_value NUMBER := e_Function_return_value;
   
      l_result BOOLEAN DEFAULT TRUE;
   l_message VARCHAR2(32767);
   l_dummy PLS_INTEGER;
   FUNCTION fp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END fp_to_string;
   FUNCTION exp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END exp_to_string;
BEGIN
   l_fp_value := Q##function_return_value;
      
   

    
   
   IF    l_fp_value IS NULL OR l_exp_value IS NULL
   THEN
      l_result :=  l_fp_value IS NULL AND l_exp_value IS NULL;
   ELSE
      l_result := l_fp_value = l_exp_value;
      IF l_result IS NULL THEN l_result := FALSE; END IF;
   END IF;
   
   
   
   
   
   l_message :=
        ' From Program Value of '
      || CASE WHEN l_fp_value IS NULL THEN 'NULL' ELSE '"' || fp_to_string(l_fp_value) || '" ' END
      || CASE WHEN l_result THEN '=' ELSE NVL('<>', 'NOT ' || '=') END
      || ' Expected Value '
      || CASE WHEN l_exp_value IS NULL THEN 'NULL' ELSE '"' || exp_to_string(l_exp_value) || '"' END;
   qcto#assert_this ( outcome_guid_in => qu_result_xp.current_outcome()
        , msg_in => l_message
        , check_this_in => l_result
        , null_ok_in    => FALSE
        , raise_exc_in  => FALSE
        );
EXCEPTION
   WHEN OTHERS THEN
      -- Report the failure.
      qcto#report_result (
          result_guid_in => qu_result_xp.current_outcome()
         ,status_in => 'RUNTIME-ERROR'
         ,description_in => qcto#error_info
      );      
END;
END check_oc_2137262725;
BEGIN
check_oc_2137262725();
NULL;/* Ensure compilability */
END check_non_exc_outcomes;
BEGIN
tc_result_guid := qu_result_xp.guid_for_key_info (result_guid_in =>qu_result_xp.current_test_case (), iteration_in => qu_result_xp.c_template_iteration);
add_input_values (tc_result_guid);
IF qu_result_xp.profiling_enabled THEN 
qu_result_xp.start_profiling (unit_name_in => 'F_CREATE_ACCOUNT', test_case_guid_in => qu_result_xp.current_test_case, test_case_name_in => 'Run F_Create_Account function with a NEW userid and VALID profile and INVALID password', test_case_iteration_in => 0);
END IF;
  /* Capture start time. */
Q##start_time := DBMS_UTILITY.GET_TIME;
Q##FUNCTION_RETURN_VALUE :=
"AVATIER"."SSI_AVATIER_ID_ENFORCER"."F_CREATE_ACCOUNT"(
P_USERID => i_P_USERID
,P_PASSWORD => i_P_PASSWORD
,P_PROFILE => i_P_PROFILE
);
/* START POST EXECUTION CONTENT */
IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
Q##end_time := DBMS_UTILITY.GET_TIME;
save_outarg_values(tc_result_guid);
  /* Get numbers of rows modified by last SQL statement. */
Q##sql_rowcount := SQL%ROWCOUNT;
/* END POST EXECUTION CONTENT */
check_non_exc_outcomes( );
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
END call_the_program;
         /* 6. Call generate_exec_section LK 2.1.1*/
         BEGIN
         qu_result_xp.set_current_tc ('{89938D93-0E07-2B7A-E054-002128953FC8}');
         if g_pre_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('PRE_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CREATE_ACCOUNT','','Run F_Create_Account function with a NEW userid and VALID profile and INVALID password'); end if;
         qu_result_xp.mark_start (qu_result_xp.current_test_case);
         setup();
         set_in_values;
         call_the_program ();
         teardown;
         if g_post_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('POST_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CREATE_ACCOUNT','','Run F_Create_Account function with a NEW userid and VALID profile and INVALID password'); end if;
         qu_result_xp.mark_end (qu_result_xp.current_test_case);
         /* 7. Call generate_end_of_program LK 2.1.1*/
         /* Exception outcomes trapping for incorrect invocation of subprogram. */
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
         END Q##RUN_F_CREATE_ACCOUNT_FUNC_2;
         PROCEDURE Q##RUN_F_CREATE_ACCOUNT_FUNC_3
         /* Test case name: Run F_Create_Account function with a NEW userid and VALID profile and VALID password */
         IS
         /* The return value of the function */
         Q##FUNCTION_RETURN_VALUE NUMBER;
         gtc_tore_down BOOLEAN;
         tc_result_guid VARCHAR2(32767);
          /* Declarations for parameters and OT attributes if present*/
         I_P_USERID VARCHAR2(32767);
         I_P_PASSWORD VARCHAR2(32767);
         I_P_PROFILE VARCHAR2(32767);
         /* Variables needed for dynamic test case execution */
         l_min_count PLS_INTEGER;
         /* Needed for inputs to program */
         /* Arrays needed for multiple outcomes from program */
         /* 2. Call generate_setup LK 2.1.1*/
         PROCEDURE setup IS
         BEGIN
         gtc_tore_down := FALSE;
         IF qu_result_xp.rolling_back_before ('Y') THEN ROLLBACK;  END IF;
         
         END setup;
         /* 3. Call generate_teardown LK 2.1.1*/
         PROCEDURE teardown IS
         BEGIN
         IF gtc_tore_down THEN NULL; ELSE gtc_tore_down := TRUE;
         /* Input teardown, including individual OT attribute teardown */
         
         IF qu_result_xp.rolling_back_after ('Y') THEN ROLLBACK;  END IF;
          END IF; END teardown;
         /* 4. Call generate_set_in_values LK 2.1.1*/
         PROCEDURE set_in_values
         IS BEGIN 
         /* Assign values to inputs for program execution. */
i_P_USERID := 'Test04';
         
i_P_PASSWORD := 'Password$123';
         
i_P_PROFILE := 'SSI_DEVELOPER';
         
          NULL;
         END set_in_values;
         /* 5. Call generate_program_call LK 2.1.1*/

PROCEDURE call_the_program IS
PROCEDURE add_input_values (tc_result_guid_in IN VARCHAR2) IS BEGIN NULL;
qu_result_xp.add_input (tc_result_guid_in, '{086FFCAD-26AA-4D3E-9AC3-0F01AD9557D8}', 'P_USERID', i_P_USERID, 1); 
qu_result_xp.save_argval ('P_USERID', i_P_USERID);
qu_result_xp.add_input (tc_result_guid_in, '{7B9ED977-894D-49DB-BC87-195423EACCFE}', 'P_PASSWORD', i_P_PASSWORD, 2); 
qu_result_xp.save_argval ('P_PASSWORD', i_P_PASSWORD);
qu_result_xp.add_input (tc_result_guid_in, '{B570BB75-BD04-48E3-93B5-D235D68CC5D1}', 'P_PROFILE', i_P_PROFILE, 3); 
qu_result_xp.save_argval ('P_PROFILE', i_P_PROFILE);
 END add_input_values;
PROCEDURE save_outarg_values (tc_result_guid_in IN VARCHAR2) IS BEGIN
  /* In case there are no scalar OUT arguments. */ NULL;
 END save_outarg_values;
PROCEDURE check_non_exc_outcomes
IS
PROCEDURE check_oc_1796556862 IS 
/* Declarations for Outcomes */
E_FUNCTION_RETURN_VALUE NUMBER;
BEGIN
  /* Outcome Reference Information: 
     Unit Test: F_CREATE_ACCOUNT (Function)-{89938D93-0DD3-2B7A-E054-002128953FC8}
     Test Case: Run F_Create_Account function with a NEW userid and VALID profile and VALID password-{89938D93-0E08-2B7A-E054-002128953FC8}
     Outcome: [Function return value] - Scalar is equal to the expected value?-{A375676D-911A-4674-B5BC-F5AB18525DC4} */
 qu_result_xp.set_current_oc ('{A375676D-911A-4674-B5BC-F5AB18525DC4}');
 e_Function_return_value := '0';
/* Copy OUT argument to variable for use in assertion code. */
/*NAMEDNOTREF*/Q##function_return_value := Q##FUNCTION_RETURN_VALUE;
 /* Assertion code for outcome {A375676D-911A-4674-B5BC-F5AB18525DC4} */
DECLARE
   cv sys_refcursor;
   l_fp_value NUMBER ;
   l_exp_value NUMBER := e_Function_return_value;
   
      l_result BOOLEAN DEFAULT TRUE;
   l_message VARCHAR2(32767);
   l_dummy PLS_INTEGER;
   FUNCTION fp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END fp_to_string;
   FUNCTION exp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END exp_to_string;
BEGIN
   l_fp_value := Q##function_return_value;
      
   

    
   
   IF    l_fp_value IS NULL OR l_exp_value IS NULL
   THEN
      l_result :=  l_fp_value IS NULL AND l_exp_value IS NULL;
   ELSE
      l_result := l_fp_value = l_exp_value;
      IF l_result IS NULL THEN l_result := FALSE; END IF;
   END IF;
   
   
   
   
   
   l_message :=
        ' From Program Value of '
      || CASE WHEN l_fp_value IS NULL THEN 'NULL' ELSE '"' || fp_to_string(l_fp_value) || '" ' END
      || CASE WHEN l_result THEN '=' ELSE NVL('<>', 'NOT ' || '=') END
      || ' Expected Value '
      || CASE WHEN l_exp_value IS NULL THEN 'NULL' ELSE '"' || exp_to_string(l_exp_value) || '"' END;
   qcto#assert_this ( outcome_guid_in => qu_result_xp.current_outcome()
        , msg_in => l_message
        , check_this_in => l_result
        , null_ok_in    => FALSE
        , raise_exc_in  => FALSE
        );
EXCEPTION
   WHEN OTHERS THEN
      -- Report the failure.
      qcto#report_result (
          result_guid_in => qu_result_xp.current_outcome()
         ,status_in => 'RUNTIME-ERROR'
         ,description_in => qcto#error_info
      );      
END;
END check_oc_1796556862;
BEGIN
check_oc_1796556862();
NULL;/* Ensure compilability */
END check_non_exc_outcomes;
BEGIN
tc_result_guid := qu_result_xp.guid_for_key_info (result_guid_in =>qu_result_xp.current_test_case (), iteration_in => qu_result_xp.c_template_iteration);
add_input_values (tc_result_guid);
IF qu_result_xp.profiling_enabled THEN 
qu_result_xp.start_profiling (unit_name_in => 'F_CREATE_ACCOUNT', test_case_guid_in => qu_result_xp.current_test_case, test_case_name_in => 'Run F_Create_Account function with a NEW userid and VALID profile and VALID password', test_case_iteration_in => 0);
END IF;
  /* Capture start time. */
Q##start_time := DBMS_UTILITY.GET_TIME;
Q##FUNCTION_RETURN_VALUE :=
"AVATIER"."SSI_AVATIER_ID_ENFORCER"."F_CREATE_ACCOUNT"(
P_USERID => i_P_USERID
,P_PASSWORD => i_P_PASSWORD
,P_PROFILE => i_P_PROFILE
);
/* START POST EXECUTION CONTENT */
IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
Q##end_time := DBMS_UTILITY.GET_TIME;
save_outarg_values(tc_result_guid);
  /* Get numbers of rows modified by last SQL statement. */
Q##sql_rowcount := SQL%ROWCOUNT;
/* END POST EXECUTION CONTENT */
check_non_exc_outcomes( );
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
END call_the_program;
         /* 6. Call generate_exec_section LK 2.1.1*/
         BEGIN
         qu_result_xp.set_current_tc ('{89938D93-0E08-2B7A-E054-002128953FC8}');
         if g_pre_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('PRE_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CREATE_ACCOUNT','','Run F_Create_Account function with a NEW userid and VALID profile and VALID password'); end if;
         qu_result_xp.mark_start (qu_result_xp.current_test_case);
         setup();
         set_in_values;
         call_the_program ();
         teardown;
         if g_post_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('POST_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CREATE_ACCOUNT','','Run F_Create_Account function with a NEW userid and VALID profile and VALID password'); end if;
         qu_result_xp.mark_end (qu_result_xp.current_test_case);
         /* 7. Call generate_end_of_program LK 2.1.1*/
         /* Exception outcomes trapping for incorrect invocation of subprogram. */
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
         END Q##RUN_F_CREATE_ACCOUNT_FUNC_3;
         PROCEDURE Q##_NEW_TEST_CASE_NAME_
         /* Test case name: Run F_Create_Account function with a Existing userid */
         IS
         /* The return value of the function */
         Q##FUNCTION_RETURN_VALUE NUMBER;
         gtc_tore_down BOOLEAN;
         tc_result_guid VARCHAR2(32767);
          /* Declarations for parameters and OT attributes if present*/
         I_P_USERID VARCHAR2(32767);
         I_P_PASSWORD VARCHAR2(32767);
         I_P_PROFILE VARCHAR2(32767);
         /* Variables needed for dynamic test case execution */
         l_min_count PLS_INTEGER;
         /* Needed for inputs to program */
         /* Arrays needed for multiple outcomes from program */
         /* 2. Call generate_setup LK 2.1.1*/
         PROCEDURE setup IS
         BEGIN
         gtc_tore_down := FALSE;
         IF qu_result_xp.rolling_back_before ('Y') THEN ROLLBACK;  END IF;
         
         END setup;
         /* 3. Call generate_teardown LK 2.1.1*/
         PROCEDURE teardown IS
         BEGIN
         IF gtc_tore_down THEN NULL; ELSE gtc_tore_down := TRUE;
         /* Input teardown, including individual OT attribute teardown */
         
         IF qu_result_xp.rolling_back_after ('Y') THEN ROLLBACK;  END IF;
          END IF; END teardown;
         /* 4. Call generate_set_in_values LK 2.1.1*/
         PROCEDURE set_in_values
         IS BEGIN 
         /* Assign values to inputs for program execution. */
i_P_USERID := 'rsuravar';
         
i_P_PASSWORD := 'Password$123';
         
i_P_PROFILE := 'dEvElOper';
         
          NULL;
         END set_in_values;
         /* 5. Call generate_program_call LK 2.1.1*/

PROCEDURE call_the_program IS
PROCEDURE add_input_values (tc_result_guid_in IN VARCHAR2) IS BEGIN NULL;
qu_result_xp.add_input (tc_result_guid_in, '{54290E59-4FD2-4C71-A29C-6FA349059FAD}', 'P_USERID', i_P_USERID, 1); 
qu_result_xp.save_argval ('P_USERID', i_P_USERID);
qu_result_xp.add_input (tc_result_guid_in, '{A57D286D-DD7F-4F7B-A029-FCC07069BBDB}', 'P_PASSWORD', i_P_PASSWORD, 2); 
qu_result_xp.save_argval ('P_PASSWORD', i_P_PASSWORD);
qu_result_xp.add_input (tc_result_guid_in, '{22689489-76B4-4647-BEC6-A90B72BEF171}', 'P_PROFILE', i_P_PROFILE, 3); 
qu_result_xp.save_argval ('P_PROFILE', i_P_PROFILE);
 END add_input_values;
PROCEDURE save_outarg_values (tc_result_guid_in IN VARCHAR2) IS BEGIN
  /* In case there are no scalar OUT arguments. */ NULL;
 END save_outarg_values;
PROCEDURE check_non_exc_outcomes
IS
PROCEDURE check_oc_1729870727 IS 
/* Declarations for Outcomes */
E_FUNCTION_RETURN_VALUE NUMBER;
BEGIN
  /* Outcome Reference Information: 
     Unit Test: F_CREATE_ACCOUNT (Function)-{89938D93-0DD3-2B7A-E054-002128953FC8}
     Test Case: Run F_Create_Account function with a Existing userid-{89938D93-0DE5-2B7A-E054-002128953FC8}
     Outcome: [Function return value] - Scalar is equal to the expected value?-{15B80908-70D2-4C9F-982E-2176279732A6} */
 qu_result_xp.set_current_oc ('{15B80908-70D2-4C9F-982E-2176279732A6}');
 e_Function_return_value := '1';
/* Copy OUT argument to variable for use in assertion code. */
/*NAMEDNOTREF*/Q##function_return_value := Q##FUNCTION_RETURN_VALUE;
 /* Assertion code for outcome {15B80908-70D2-4C9F-982E-2176279732A6} */
DECLARE
   cv sys_refcursor;
   l_fp_value NUMBER ;
   l_exp_value NUMBER := e_Function_return_value;
   
      l_result BOOLEAN DEFAULT TRUE;
   l_message VARCHAR2(32767);
   l_dummy PLS_INTEGER;
   FUNCTION fp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END fp_to_string;
   FUNCTION exp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END exp_to_string;
BEGIN
   l_fp_value := Q##function_return_value;
      
   

    
   
   IF    l_fp_value IS NULL OR l_exp_value IS NULL
   THEN
      l_result :=  l_fp_value IS NULL AND l_exp_value IS NULL;
   ELSE
      l_result := l_fp_value = l_exp_value;
      IF l_result IS NULL THEN l_result := FALSE; END IF;
   END IF;
   
   
   
   
   
   l_message :=
        ' From Program Value of '
      || CASE WHEN l_fp_value IS NULL THEN 'NULL' ELSE '"' || fp_to_string(l_fp_value) || '" ' END
      || CASE WHEN l_result THEN '=' ELSE NVL('<>', 'NOT ' || '=') END
      || ' Expected Value '
      || CASE WHEN l_exp_value IS NULL THEN 'NULL' ELSE '"' || exp_to_string(l_exp_value) || '"' END;
   qcto#assert_this ( outcome_guid_in => qu_result_xp.current_outcome()
        , msg_in => l_message
        , check_this_in => l_result
        , null_ok_in    => FALSE
        , raise_exc_in  => FALSE
        );
EXCEPTION
   WHEN OTHERS THEN
      -- Report the failure.
      qcto#report_result (
          result_guid_in => qu_result_xp.current_outcome()
         ,status_in => 'RUNTIME-ERROR'
         ,description_in => qcto#error_info
      );      
END;
END check_oc_1729870727;
BEGIN
check_oc_1729870727();
NULL;/* Ensure compilability */
END check_non_exc_outcomes;
BEGIN
tc_result_guid := qu_result_xp.guid_for_key_info (result_guid_in =>qu_result_xp.current_test_case (), iteration_in => qu_result_xp.c_template_iteration);
add_input_values (tc_result_guid);
IF qu_result_xp.profiling_enabled THEN 
qu_result_xp.start_profiling (unit_name_in => 'F_CREATE_ACCOUNT', test_case_guid_in => qu_result_xp.current_test_case, test_case_name_in => 'Run F_Create_Account function with a Existing userid', test_case_iteration_in => 0);
END IF;
  /* Capture start time. */
Q##start_time := DBMS_UTILITY.GET_TIME;
Q##FUNCTION_RETURN_VALUE :=
"AVATIER"."SSI_AVATIER_ID_ENFORCER"."F_CREATE_ACCOUNT"(
P_USERID => i_P_USERID
,P_PASSWORD => i_P_PASSWORD
,P_PROFILE => i_P_PROFILE
);
/* START POST EXECUTION CONTENT */
IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
Q##end_time := DBMS_UTILITY.GET_TIME;
save_outarg_values(tc_result_guid);
  /* Get numbers of rows modified by last SQL statement. */
Q##sql_rowcount := SQL%ROWCOUNT;
/* END POST EXECUTION CONTENT */
check_non_exc_outcomes( );
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
END call_the_program;
         /* 6. Call generate_exec_section LK 2.1.1*/
         BEGIN
         qu_result_xp.set_current_tc ('{89938D93-0DE5-2B7A-E054-002128953FC8}');
         if g_pre_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('PRE_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CREATE_ACCOUNT','','Run F_Create_Account function with a Existing userid'); end if;
         qu_result_xp.mark_start (qu_result_xp.current_test_case);
         setup();
         set_in_values;
         call_the_program ();
         teardown;
         if g_post_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('POST_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CREATE_ACCOUNT','','Run F_Create_Account function with a Existing userid'); end if;
         qu_result_xp.mark_end (qu_result_xp.current_test_case);
         /* 7. Call generate_end_of_program LK 2.1.1*/
         /* Exception outcomes trapping for incorrect invocation of subprogram. */
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
         END Q##_NEW_TEST_CASE_NAME_;
         BEGIN
         qu_result_xp.mark_start ('{89938D93-0DD3-2B7A-E054-002128953FC8}');
         qu_result_xp.set_current_ut ('{89938D93-0DD3-2B7A-E054-002128953FC8}');
         if g_pre_ut_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('PRE_UNIT_TEST','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CREATE_ACCOUNT',''); end if;
         DECLARE
   TYPE order_t IS TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;
   l_exec_order order_t;
         PROCEDURE run_one (seq_in IN PLS_INTEGER) IS BEGIN 
         CASE seq_in
         WHEN 2 THEN  IF NOT qcto#skip_tc ('{89938D93-0E05-2B7A-E054-002128953FC8}') THEN Q##RUN_F_CREATE_ACCOUNT_FUNCTI; END IF;
         WHEN 3 THEN  IF NOT qcto#skip_tc ('{89938D93-0E06-2B7A-E054-002128953FC8}') THEN Q##RUN_F_CREATE_ACCOUNT_FUNC_1; END IF;
         WHEN 4 THEN  IF NOT qcto#skip_tc ('{89938D93-0E07-2B7A-E054-002128953FC8}') THEN Q##RUN_F_CREATE_ACCOUNT_FUNC_2; END IF;
         WHEN 5 THEN  IF NOT qcto#skip_tc ('{89938D93-0E08-2B7A-E054-002128953FC8}') THEN Q##RUN_F_CREATE_ACCOUNT_FUNC_3; END IF;
         WHEN 1 THEN  IF NOT qcto#skip_tc ('{89938D93-0DE5-2B7A-E054-002128953FC8}') THEN Q##_NEW_TEST_CASE_NAME_; END IF;
         END CASE; END run_one; BEGIN
         /* Use order specified by tester. */
         l_exec_order(1) := 1;
         l_exec_order(2) := 2;
         l_exec_order(3) := 3;
         l_exec_order(4) := 4;
         l_exec_order(5) := 5;
         FOR ii IN 1 .. l_exec_order.COUNT LOOP run_one (l_exec_order(ii)); END LOOP;
         END;
         IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
         if g_post_ut_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('POST_UNIT_TEST','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_CREATE_ACCOUNT',''); end if;
         qu_result_xp.mark_end ('{89938D93-0DD3-2B7A-E054-002128953FC8}');
         EXCEPTION WHEN OTHERS THEN 
         IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
         qcto#report_result (result_guid_in => qu_result_xp.current_unit_test,status_in => 'RUNTIME-ERROR',description_in => qcto#error_info);
         
         IF qu_result_xp.rolling_back_after () THEN ROLLBACK;  END IF;
         END Q##F_CREATE_ACCOUNT;
         PROCEDURE Q##F_ASSIGN_ROLES
         /* Unit test procedure for F_ASSIGN_ROLES
Unit test for "F_ASSIGN_ROLES"
 */
         IS
         PROCEDURE Q##RUN_F_ASSIGN_ROLES_FUNCTION
         /* Test case name: Run F_Assign_Roles function with an INVALID or NULL userid */
         IS
         /* The return value of the function */
         Q##FUNCTION_RETURN_VALUE NUMBER;
         gtc_tore_down BOOLEAN;
         tc_result_guid VARCHAR2(32767);
          /* Declarations for parameters and OT attributes if present*/
         I_P_USERID VARCHAR2(32767);
         I_P_ROLENAME VARCHAR2(32767);
         /* Variables needed for dynamic test case execution */
         l_min_count PLS_INTEGER;
         /* Needed for inputs to program */
         /* Arrays needed for multiple outcomes from program */
         /* 2. Call generate_setup LK 2.1.1*/
         PROCEDURE setup IS
         BEGIN
         gtc_tore_down := FALSE;
         IF qu_result_xp.rolling_back_before ('Y') THEN ROLLBACK;  END IF;
         
         END setup;
         /* 3. Call generate_teardown LK 2.1.1*/
         PROCEDURE teardown IS
         BEGIN
         IF gtc_tore_down THEN NULL; ELSE gtc_tore_down := TRUE;
         /* Input teardown, including individual OT attribute teardown */
         
         IF qu_result_xp.rolling_back_after ('Y') THEN ROLLBACK;  END IF;
          END IF; END teardown;
         /* 4. Call generate_set_in_values LK 2.1.1*/
         PROCEDURE set_in_values
         IS BEGIN 
         /* Assign values to inputs for program execution. */
i_P_USERID := 'C6dt%FC*^%5';
         
i_P_ROLENAME := 'DEVELOPER';
         
          NULL;
         END set_in_values;
         /* 5. Call generate_program_call LK 2.1.1*/

PROCEDURE call_the_program IS
PROCEDURE add_input_values (tc_result_guid_in IN VARCHAR2) IS BEGIN NULL;
qu_result_xp.add_input (tc_result_guid_in, '{1DAB296A-70AB-4CC1-AE06-7C67FA825407}', 'P_USERID', i_P_USERID, 1); 
qu_result_xp.save_argval ('P_USERID', i_P_USERID);
qu_result_xp.add_input (tc_result_guid_in, '{9F18EB2F-E72F-48E4-BD1C-59FF8F93F3B4}', 'P_ROLENAME', i_P_ROLENAME, 2); 
qu_result_xp.save_argval ('P_ROLENAME', i_P_ROLENAME);
 END add_input_values;
PROCEDURE save_outarg_values (tc_result_guid_in IN VARCHAR2) IS BEGIN
  /* In case there are no scalar OUT arguments. */ NULL;
 END save_outarg_values;
PROCEDURE check_non_exc_outcomes
IS
PROCEDURE check_oc_1072644394 IS 
/* Declarations for Outcomes */
E_FUNCTION_RETURN_VALUE NUMBER;
BEGIN
  /* Outcome Reference Information: 
     Unit Test: F_ASSIGN_ROLES (Function)-{89938D93-0D7E-2B7A-E054-002128953FC8}
     Test Case: Run F_Assign_Roles function with an INVALID or NULL userid-{89947E0D-E5DE-4D7B-E054-002128953FC8}
     Outcome: [Function return value] - Scalar is equal to the expected value?-{6730C260-4CCA-4FC5-BEF9-1A84CCE7DFC9} */
 qu_result_xp.set_current_oc ('{6730C260-4CCA-4FC5-BEF9-1A84CCE7DFC9}');
 e_Function_return_value := '1';
/* Copy OUT argument to variable for use in assertion code. */
/*NAMEDNOTREF*/Q##function_return_value := Q##FUNCTION_RETURN_VALUE;
 /* Assertion code for outcome {6730C260-4CCA-4FC5-BEF9-1A84CCE7DFC9} */
DECLARE
   cv sys_refcursor;
   l_fp_value NUMBER ;
   l_exp_value NUMBER := e_Function_return_value;
   
      l_result BOOLEAN DEFAULT TRUE;
   l_message VARCHAR2(32767);
   l_dummy PLS_INTEGER;
   FUNCTION fp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END fp_to_string;
   FUNCTION exp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END exp_to_string;
BEGIN
   l_fp_value := Q##function_return_value;
      
   

    
   
   IF    l_fp_value IS NULL OR l_exp_value IS NULL
   THEN
      l_result :=  l_fp_value IS NULL AND l_exp_value IS NULL;
   ELSE
      l_result := l_fp_value = l_exp_value;
      IF l_result IS NULL THEN l_result := FALSE; END IF;
   END IF;
   
   
   
   
   
   l_message :=
        ' From Program Value of '
      || CASE WHEN l_fp_value IS NULL THEN 'NULL' ELSE '"' || fp_to_string(l_fp_value) || '" ' END
      || CASE WHEN l_result THEN '=' ELSE NVL('<>', 'NOT ' || '=') END
      || ' Expected Value '
      || CASE WHEN l_exp_value IS NULL THEN 'NULL' ELSE '"' || exp_to_string(l_exp_value) || '"' END;
   qcto#assert_this ( outcome_guid_in => qu_result_xp.current_outcome()
        , msg_in => l_message
        , check_this_in => l_result
        , null_ok_in    => FALSE
        , raise_exc_in  => FALSE
        );
EXCEPTION
   WHEN OTHERS THEN
      -- Report the failure.
      qcto#report_result (
          result_guid_in => qu_result_xp.current_outcome()
         ,status_in => 'RUNTIME-ERROR'
         ,description_in => qcto#error_info
      );      
END;
END check_oc_1072644394;
BEGIN
check_oc_1072644394();
NULL;/* Ensure compilability */
END check_non_exc_outcomes;
BEGIN
tc_result_guid := qu_result_xp.guid_for_key_info (result_guid_in =>qu_result_xp.current_test_case (), iteration_in => qu_result_xp.c_template_iteration);
add_input_values (tc_result_guid);
IF qu_result_xp.profiling_enabled THEN 
qu_result_xp.start_profiling (unit_name_in => 'F_ASSIGN_ROLES', test_case_guid_in => qu_result_xp.current_test_case, test_case_name_in => 'Run F_Assign_Roles function with an INVALID or NULL userid', test_case_iteration_in => 0);
END IF;
  /* Capture start time. */
Q##start_time := DBMS_UTILITY.GET_TIME;
Q##FUNCTION_RETURN_VALUE :=
"AVATIER"."SSI_AVATIER_ID_ENFORCER"."F_ASSIGN_ROLES"(
P_USERID => i_P_USERID
,P_ROLENAME => i_P_ROLENAME
);
/* START POST EXECUTION CONTENT */
IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
Q##end_time := DBMS_UTILITY.GET_TIME;
save_outarg_values(tc_result_guid);
  /* Get numbers of rows modified by last SQL statement. */
Q##sql_rowcount := SQL%ROWCOUNT;
/* END POST EXECUTION CONTENT */
check_non_exc_outcomes( );
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
END call_the_program;
         /* 6. Call generate_exec_section LK 2.1.1*/
         BEGIN
         qu_result_xp.set_current_tc ('{89947E0D-E5DE-4D7B-E054-002128953FC8}');
         if g_pre_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('PRE_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_ASSIGN_ROLES','','Run F_Assign_Roles function with an INVALID or NULL userid'); end if;
         qu_result_xp.mark_start (qu_result_xp.current_test_case);
         setup();
         set_in_values;
         call_the_program ();
         teardown;
         if g_post_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('POST_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_ASSIGN_ROLES','','Run F_Assign_Roles function with an INVALID or NULL userid'); end if;
         qu_result_xp.mark_end (qu_result_xp.current_test_case);
         /* 7. Call generate_end_of_program LK 2.1.1*/
         /* Exception outcomes trapping for incorrect invocation of subprogram. */
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
         END Q##RUN_F_ASSIGN_ROLES_FUNCTION;
         PROCEDURE Q##RUN_F_ASSIGN_ROLES_FUNCTI_1
         /* Test case name: Run F_Assign_Roles function with a VALID userid and an INVALID role */
         IS
         /* The return value of the function */
         Q##FUNCTION_RETURN_VALUE NUMBER;
         gtc_tore_down BOOLEAN;
         tc_result_guid VARCHAR2(32767);
          /* Declarations for parameters and OT attributes if present*/
         I_P_USERID VARCHAR2(32767);
         I_P_ROLENAME VARCHAR2(32767);
         /* Variables needed for dynamic test case execution */
         l_min_count PLS_INTEGER;
         /* Needed for inputs to program */
         /* Arrays needed for multiple outcomes from program */
         /* 2. Call generate_setup LK 2.1.1*/
         PROCEDURE setup IS
         BEGIN
         gtc_tore_down := FALSE;
         IF qu_result_xp.rolling_back_before ('Y') THEN ROLLBACK;  END IF;
         
         END setup;
         /* 3. Call generate_teardown LK 2.1.1*/
         PROCEDURE teardown IS
         BEGIN
         IF gtc_tore_down THEN NULL; ELSE gtc_tore_down := TRUE;
         /* Input teardown, including individual OT attribute teardown */
         
         IF qu_result_xp.rolling_back_after ('Y') THEN ROLLBACK;  END IF;
          END IF; END teardown;
         /* 4. Call generate_set_in_values LK 2.1.1*/
         PROCEDURE set_in_values
         IS BEGIN 
         /* Assign values to inputs for program execution. */
i_P_USERID := 'TEST01';
         
i_P_ROLENAME := 'cuyt^T%DC56fr56s';
         
          NULL;
         END set_in_values;
         /* 5. Call generate_program_call LK 2.1.1*/

PROCEDURE call_the_program IS
PROCEDURE add_input_values (tc_result_guid_in IN VARCHAR2) IS BEGIN NULL;
qu_result_xp.add_input (tc_result_guid_in, '{D912BCD2-9A09-4B2D-827C-A95B180B67EE}', 'P_USERID', i_P_USERID, 1); 
qu_result_xp.save_argval ('P_USERID', i_P_USERID);
qu_result_xp.add_input (tc_result_guid_in, '{73527894-3380-4E96-841E-A059FCFD67BF}', 'P_ROLENAME', i_P_ROLENAME, 2); 
qu_result_xp.save_argval ('P_ROLENAME', i_P_ROLENAME);
 END add_input_values;
PROCEDURE save_outarg_values (tc_result_guid_in IN VARCHAR2) IS BEGIN
  /* In case there are no scalar OUT arguments. */ NULL;
 END save_outarg_values;
PROCEDURE check_non_exc_outcomes
IS
PROCEDURE check_oc_1718009572 IS 
/* Declarations for Outcomes */
E_FUNCTION_RETURN_VALUE NUMBER;
BEGIN
  /* Outcome Reference Information: 
     Unit Test: F_ASSIGN_ROLES (Function)-{89938D93-0D7E-2B7A-E054-002128953FC8}
     Test Case: Run F_Assign_Roles function with a VALID userid and an INVALID role-{89947E0D-E5DF-4D7B-E054-002128953FC8}
     Outcome: [Function return value] - Scalar is equal to the expected value?-{21F1D5F7-06B0-419C-A371-4AC365E61B1E} */
 qu_result_xp.set_current_oc ('{21F1D5F7-06B0-419C-A371-4AC365E61B1E}');
 e_Function_return_value := '1';
/* Copy OUT argument to variable for use in assertion code. */
/*NAMEDNOTREF*/Q##function_return_value := Q##FUNCTION_RETURN_VALUE;
 /* Assertion code for outcome {21F1D5F7-06B0-419C-A371-4AC365E61B1E} */
DECLARE
   cv sys_refcursor;
   l_fp_value NUMBER ;
   l_exp_value NUMBER := e_Function_return_value;
   
      l_result BOOLEAN DEFAULT TRUE;
   l_message VARCHAR2(32767);
   l_dummy PLS_INTEGER;
   FUNCTION fp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END fp_to_string;
   FUNCTION exp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END exp_to_string;
BEGIN
   l_fp_value := Q##function_return_value;
      
   

    
   
   IF    l_fp_value IS NULL OR l_exp_value IS NULL
   THEN
      l_result :=  l_fp_value IS NULL AND l_exp_value IS NULL;
   ELSE
      l_result := l_fp_value = l_exp_value;
      IF l_result IS NULL THEN l_result := FALSE; END IF;
   END IF;
   
   
   
   
   
   l_message :=
        ' From Program Value of '
      || CASE WHEN l_fp_value IS NULL THEN 'NULL' ELSE '"' || fp_to_string(l_fp_value) || '" ' END
      || CASE WHEN l_result THEN '=' ELSE NVL('<>', 'NOT ' || '=') END
      || ' Expected Value '
      || CASE WHEN l_exp_value IS NULL THEN 'NULL' ELSE '"' || exp_to_string(l_exp_value) || '"' END;
   qcto#assert_this ( outcome_guid_in => qu_result_xp.current_outcome()
        , msg_in => l_message
        , check_this_in => l_result
        , null_ok_in    => FALSE
        , raise_exc_in  => FALSE
        );
EXCEPTION
   WHEN OTHERS THEN
      -- Report the failure.
      qcto#report_result (
          result_guid_in => qu_result_xp.current_outcome()
         ,status_in => 'RUNTIME-ERROR'
         ,description_in => qcto#error_info
      );      
END;
END check_oc_1718009572;
BEGIN
check_oc_1718009572();
NULL;/* Ensure compilability */
END check_non_exc_outcomes;
BEGIN
tc_result_guid := qu_result_xp.guid_for_key_info (result_guid_in =>qu_result_xp.current_test_case (), iteration_in => qu_result_xp.c_template_iteration);
add_input_values (tc_result_guid);
IF qu_result_xp.profiling_enabled THEN 
qu_result_xp.start_profiling (unit_name_in => 'F_ASSIGN_ROLES', test_case_guid_in => qu_result_xp.current_test_case, test_case_name_in => 'Run F_Assign_Roles function with a VALID userid and an INVALID role', test_case_iteration_in => 0);
END IF;
  /* Capture start time. */
Q##start_time := DBMS_UTILITY.GET_TIME;
Q##FUNCTION_RETURN_VALUE :=
"AVATIER"."SSI_AVATIER_ID_ENFORCER"."F_ASSIGN_ROLES"(
P_USERID => i_P_USERID
,P_ROLENAME => i_P_ROLENAME
);
/* START POST EXECUTION CONTENT */
IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
Q##end_time := DBMS_UTILITY.GET_TIME;
save_outarg_values(tc_result_guid);
  /* Get numbers of rows modified by last SQL statement. */
Q##sql_rowcount := SQL%ROWCOUNT;
/* END POST EXECUTION CONTENT */
check_non_exc_outcomes( );
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
END call_the_program;
         /* 6. Call generate_exec_section LK 2.1.1*/
         BEGIN
         qu_result_xp.set_current_tc ('{89947E0D-E5DF-4D7B-E054-002128953FC8}');
         if g_pre_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('PRE_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_ASSIGN_ROLES','','Run F_Assign_Roles function with a VALID userid and an INVALID role'); end if;
         qu_result_xp.mark_start (qu_result_xp.current_test_case);
         setup();
         set_in_values;
         call_the_program ();
         teardown;
         if g_post_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('POST_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_ASSIGN_ROLES','','Run F_Assign_Roles function with a VALID userid and an INVALID role'); end if;
         qu_result_xp.mark_end (qu_result_xp.current_test_case);
         /* 7. Call generate_end_of_program LK 2.1.1*/
         /* Exception outcomes trapping for incorrect invocation of subprogram. */
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
         END Q##RUN_F_ASSIGN_ROLES_FUNCTI_1;
         PROCEDURE Q##RUN_F_ASSIGN_ROLES_FUNCTI_2
         /* Test case name: Run F_Assign_Roles function with a VALID userid and a VALID role */
         IS
         /* The return value of the function */
         Q##FUNCTION_RETURN_VALUE NUMBER;
         gtc_tore_down BOOLEAN;
         tc_result_guid VARCHAR2(32767);
          /* Declarations for parameters and OT attributes if present*/
         I_P_USERID VARCHAR2(32767);
         I_P_ROLENAME VARCHAR2(32767);
         /* Variables needed for dynamic test case execution */
         l_min_count PLS_INTEGER;
         /* Needed for inputs to program */
         /* Arrays needed for multiple outcomes from program */
         /* 2. Call generate_setup LK 2.1.1*/
         PROCEDURE setup IS
         BEGIN
         gtc_tore_down := FALSE;
         IF qu_result_xp.rolling_back_before ('Y') THEN ROLLBACK;  END IF;
         
         END setup;
         /* 3. Call generate_teardown LK 2.1.1*/
         PROCEDURE teardown IS
         BEGIN
         IF gtc_tore_down THEN NULL; ELSE gtc_tore_down := TRUE;
         /* Input teardown, including individual OT attribute teardown */
         
         IF qu_result_xp.rolling_back_after ('Y') THEN ROLLBACK;  END IF;
          END IF; END teardown;
         /* 4. Call generate_set_in_values LK 2.1.1*/
         PROCEDURE set_in_values
         IS BEGIN 
         /* Assign values to inputs for program execution. */
i_P_USERID := 'TEST04';
         
i_P_ROLENAME := 'MDC';
         
          NULL;
         END set_in_values;
         /* 5. Call generate_program_call LK 2.1.1*/

PROCEDURE call_the_program IS
PROCEDURE add_input_values (tc_result_guid_in IN VARCHAR2) IS BEGIN NULL;
qu_result_xp.add_input (tc_result_guid_in, '{9FBD7B61-1BAA-4787-A8F2-B38AD36053FC}', 'P_USERID', i_P_USERID, 1); 
qu_result_xp.save_argval ('P_USERID', i_P_USERID);
qu_result_xp.add_input (tc_result_guid_in, '{79B720F2-FE5C-48A5-B87A-254D4AB9F1B2}', 'P_ROLENAME', i_P_ROLENAME, 2); 
qu_result_xp.save_argval ('P_ROLENAME', i_P_ROLENAME);
 END add_input_values;
PROCEDURE save_outarg_values (tc_result_guid_in IN VARCHAR2) IS BEGIN
  /* In case there are no scalar OUT arguments. */ NULL;
 END save_outarg_values;
PROCEDURE check_non_exc_outcomes
IS
PROCEDURE check_oc_168825945 IS 
/* Declarations for Outcomes */
E_FUNCTION_RETURN_VALUE NUMBER;
BEGIN
  /* Outcome Reference Information: 
     Unit Test: F_ASSIGN_ROLES (Function)-{89938D93-0D7E-2B7A-E054-002128953FC8}
     Test Case: Run F_Assign_Roles function with a VALID userid and a VALID role-{89947E0D-E5E0-4D7B-E054-002128953FC8}
     Outcome: [Function return value] - Scalar is equal to the expected value?-{6BDE1E9D-D3FE-4612-8BC4-E86CD1187400} */
 qu_result_xp.set_current_oc ('{6BDE1E9D-D3FE-4612-8BC4-E86CD1187400}');
 e_Function_return_value := '0';
/* Copy OUT argument to variable for use in assertion code. */
/*NAMEDNOTREF*/Q##function_return_value := Q##FUNCTION_RETURN_VALUE;
 /* Assertion code for outcome {6BDE1E9D-D3FE-4612-8BC4-E86CD1187400} */
DECLARE
   cv sys_refcursor;
   l_fp_value NUMBER ;
   l_exp_value NUMBER := e_Function_return_value;
   
      l_result BOOLEAN DEFAULT TRUE;
   l_message VARCHAR2(32767);
   l_dummy PLS_INTEGER;
   FUNCTION fp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END fp_to_string;
   FUNCTION exp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END exp_to_string;
BEGIN
   l_fp_value := Q##function_return_value;
      
   

    
   
   IF    l_fp_value IS NULL OR l_exp_value IS NULL
   THEN
      l_result :=  l_fp_value IS NULL AND l_exp_value IS NULL;
   ELSE
      l_result := l_fp_value = l_exp_value;
      IF l_result IS NULL THEN l_result := FALSE; END IF;
   END IF;
   
   
   
   
   
   l_message :=
        ' From Program Value of '
      || CASE WHEN l_fp_value IS NULL THEN 'NULL' ELSE '"' || fp_to_string(l_fp_value) || '" ' END
      || CASE WHEN l_result THEN '=' ELSE NVL('<>', 'NOT ' || '=') END
      || ' Expected Value '
      || CASE WHEN l_exp_value IS NULL THEN 'NULL' ELSE '"' || exp_to_string(l_exp_value) || '"' END;
   qcto#assert_this ( outcome_guid_in => qu_result_xp.current_outcome()
        , msg_in => l_message
        , check_this_in => l_result
        , null_ok_in    => FALSE
        , raise_exc_in  => FALSE
        );
EXCEPTION
   WHEN OTHERS THEN
      -- Report the failure.
      qcto#report_result (
          result_guid_in => qu_result_xp.current_outcome()
         ,status_in => 'RUNTIME-ERROR'
         ,description_in => qcto#error_info
      );      
END;
END check_oc_168825945;
BEGIN
check_oc_168825945();
NULL;/* Ensure compilability */
END check_non_exc_outcomes;
BEGIN
tc_result_guid := qu_result_xp.guid_for_key_info (result_guid_in =>qu_result_xp.current_test_case (), iteration_in => qu_result_xp.c_template_iteration);
add_input_values (tc_result_guid);
IF qu_result_xp.profiling_enabled THEN 
qu_result_xp.start_profiling (unit_name_in => 'F_ASSIGN_ROLES', test_case_guid_in => qu_result_xp.current_test_case, test_case_name_in => 'Run F_Assign_Roles function with a VALID userid and a VALID role', test_case_iteration_in => 0);
END IF;
  /* Capture start time. */
Q##start_time := DBMS_UTILITY.GET_TIME;
Q##FUNCTION_RETURN_VALUE :=
"AVATIER"."SSI_AVATIER_ID_ENFORCER"."F_ASSIGN_ROLES"(
P_USERID => i_P_USERID
,P_ROLENAME => i_P_ROLENAME
);
/* START POST EXECUTION CONTENT */
IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
Q##end_time := DBMS_UTILITY.GET_TIME;
save_outarg_values(tc_result_guid);
  /* Get numbers of rows modified by last SQL statement. */
Q##sql_rowcount := SQL%ROWCOUNT;
/* END POST EXECUTION CONTENT */
check_non_exc_outcomes( );
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
END call_the_program;
         /* 6. Call generate_exec_section LK 2.1.1*/
         BEGIN
         qu_result_xp.set_current_tc ('{89947E0D-E5E0-4D7B-E054-002128953FC8}');
         if g_pre_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('PRE_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_ASSIGN_ROLES','','Run F_Assign_Roles function with a VALID userid and a VALID role'); end if;
         qu_result_xp.mark_start (qu_result_xp.current_test_case);
         setup();
         set_in_values;
         call_the_program ();
         teardown;
         if g_post_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('POST_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_ASSIGN_ROLES','','Run F_Assign_Roles function with a VALID userid and a VALID role'); end if;
         qu_result_xp.mark_end (qu_result_xp.current_test_case);
         /* 7. Call generate_end_of_program LK 2.1.1*/
         /* Exception outcomes trapping for incorrect invocation of subprogram. */
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
         END Q##RUN_F_ASSIGN_ROLES_FUNCTI_2;
         PROCEDURE Q##_NEW_TEST_CASE_NAME_
         /* Test case name: Run F_Assign_Roles function with a Service Account userid */
         IS
         /* The return value of the function */
         Q##FUNCTION_RETURN_VALUE NUMBER;
         gtc_tore_down BOOLEAN;
         tc_result_guid VARCHAR2(32767);
          /* Declarations for parameters and OT attributes if present*/
         I_P_USERID VARCHAR2(32767);
         I_P_ROLENAME VARCHAR2(32767);
         /* Variables needed for dynamic test case execution */
         l_min_count PLS_INTEGER;
         /* Needed for inputs to program */
         /* Arrays needed for multiple outcomes from program */
         /* 2. Call generate_setup LK 2.1.1*/
         PROCEDURE setup IS
         BEGIN
         gtc_tore_down := FALSE;
         IF qu_result_xp.rolling_back_before ('Y') THEN ROLLBACK;  END IF;
         
         END setup;
         /* 3. Call generate_teardown LK 2.1.1*/
         PROCEDURE teardown IS
         BEGIN
         IF gtc_tore_down THEN NULL; ELSE gtc_tore_down := TRUE;
         /* Input teardown, including individual OT attribute teardown */
         
         IF qu_result_xp.rolling_back_after ('Y') THEN ROLLBACK;  END IF;
          END IF; END teardown;
         /* 4. Call generate_set_in_values LK 2.1.1*/
         PROCEDURE set_in_values
         IS BEGIN 
         /* Assign values to inputs for program execution. */
i_P_USERID := 'Test01';
         
i_P_ROLENAME := 'DEVELOPER';
         
          NULL;
         END set_in_values;
         /* 5. Call generate_program_call LK 2.1.1*/

PROCEDURE call_the_program IS
PROCEDURE add_input_values (tc_result_guid_in IN VARCHAR2) IS BEGIN NULL;
qu_result_xp.add_input (tc_result_guid_in, '{BE44B583-7249-40B1-8DBA-25930E16C60A}', 'P_USERID', i_P_USERID, 1); 
qu_result_xp.save_argval ('P_USERID', i_P_USERID);
qu_result_xp.add_input (tc_result_guid_in, '{77A95EC7-B4F8-4EAF-9A95-DB914D8C5F97}', 'P_ROLENAME', i_P_ROLENAME, 2); 
qu_result_xp.save_argval ('P_ROLENAME', i_P_ROLENAME);
 END add_input_values;
PROCEDURE save_outarg_values (tc_result_guid_in IN VARCHAR2) IS BEGIN
  /* In case there are no scalar OUT arguments. */ NULL;
 END save_outarg_values;
PROCEDURE check_non_exc_outcomes
IS
PROCEDURE check_oc_994545710 IS 
/* Declarations for Outcomes */
E_FUNCTION_RETURN_VALUE NUMBER;
BEGIN
  /* Outcome Reference Information: 
     Unit Test: F_ASSIGN_ROLES (Function)-{89938D93-0D7E-2B7A-E054-002128953FC8}
     Test Case: Run F_Assign_Roles function with a Service Account userid-{89938D93-0D99-2B7A-E054-002128953FC8}
     Outcome: [Function return value] - Scalar is equal to the expected value?-{EB7D1796-C002-4519-94A0-CBB934927A9A} */
 qu_result_xp.set_current_oc ('{EB7D1796-C002-4519-94A0-CBB934927A9A}');
 e_Function_return_value := '1';
/* Copy OUT argument to variable for use in assertion code. */
/*NAMEDNOTREF*/Q##function_return_value := Q##FUNCTION_RETURN_VALUE;
 /* Assertion code for outcome {EB7D1796-C002-4519-94A0-CBB934927A9A} */
DECLARE
   cv sys_refcursor;
   l_fp_value NUMBER ;
   l_exp_value NUMBER := e_Function_return_value;
   
      l_result BOOLEAN DEFAULT TRUE;
   l_message VARCHAR2(32767);
   l_dummy PLS_INTEGER;
   FUNCTION fp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END fp_to_string;
   FUNCTION exp_to_string (value_in IN NUMBER) RETURN VARCHAR2 IS l_string VARCHAR2(32767); BEGIN l_string := CASE WHEN value_in IS NULL THEN NULL ELSE  TO_CHAR ( value_in ) END; RETURN l_string; END exp_to_string;
BEGIN
   l_fp_value := Q##function_return_value;
      
   

    
   
   IF    l_fp_value IS NULL OR l_exp_value IS NULL
   THEN
      l_result :=  l_fp_value IS NULL AND l_exp_value IS NULL;
   ELSE
      l_result := l_fp_value = l_exp_value;
      IF l_result IS NULL THEN l_result := FALSE; END IF;
   END IF;
   
   
   
   
   
   l_message :=
        ' From Program Value of '
      || CASE WHEN l_fp_value IS NULL THEN 'NULL' ELSE '"' || fp_to_string(l_fp_value) || '" ' END
      || CASE WHEN l_result THEN '=' ELSE NVL('<>', 'NOT ' || '=') END
      || ' Expected Value '
      || CASE WHEN l_exp_value IS NULL THEN 'NULL' ELSE '"' || exp_to_string(l_exp_value) || '"' END;
   qcto#assert_this ( outcome_guid_in => qu_result_xp.current_outcome()
        , msg_in => l_message
        , check_this_in => l_result
        , null_ok_in    => FALSE
        , raise_exc_in  => FALSE
        );
EXCEPTION
   WHEN OTHERS THEN
      -- Report the failure.
      qcto#report_result (
          result_guid_in => qu_result_xp.current_outcome()
         ,status_in => 'RUNTIME-ERROR'
         ,description_in => qcto#error_info
      );      
END;
END check_oc_994545710;
BEGIN
check_oc_994545710();
NULL;/* Ensure compilability */
END check_non_exc_outcomes;
BEGIN
tc_result_guid := qu_result_xp.guid_for_key_info (result_guid_in =>qu_result_xp.current_test_case (), iteration_in => qu_result_xp.c_template_iteration);
add_input_values (tc_result_guid);
IF qu_result_xp.profiling_enabled THEN 
qu_result_xp.start_profiling (unit_name_in => 'F_ASSIGN_ROLES', test_case_guid_in => qu_result_xp.current_test_case, test_case_name_in => 'Run F_Assign_Roles function with a Service Account userid', test_case_iteration_in => 0);
END IF;
  /* Capture start time. */
Q##start_time := DBMS_UTILITY.GET_TIME;
Q##FUNCTION_RETURN_VALUE :=
"AVATIER"."SSI_AVATIER_ID_ENFORCER"."F_ASSIGN_ROLES"(
P_USERID => i_P_USERID
,P_ROLENAME => i_P_ROLENAME
);
/* START POST EXECUTION CONTENT */
IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
Q##end_time := DBMS_UTILITY.GET_TIME;
save_outarg_values(tc_result_guid);
  /* Get numbers of rows modified by last SQL statement. */
Q##sql_rowcount := SQL%ROWCOUNT;
/* END POST EXECUTION CONTENT */
check_non_exc_outcomes( );
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
END call_the_program;
         /* 6. Call generate_exec_section LK 2.1.1*/
         BEGIN
         qu_result_xp.set_current_tc ('{89938D93-0D99-2B7A-E054-002128953FC8}');
         if g_pre_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('PRE_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_ASSIGN_ROLES','','Run F_Assign_Roles function with a Service Account userid'); end if;
         qu_result_xp.mark_start (qu_result_xp.current_test_case);
         setup();
         set_in_values;
         call_the_program ();
         teardown;
         if g_post_tc_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('POST_TEST_CASE','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_ASSIGN_ROLES','','Run F_Assign_Roles function with a Service Account userid'); end if;
         qu_result_xp.mark_end (qu_result_xp.current_test_case);
         /* 7. Call generate_end_of_program LK 2.1.1*/
         /* Exception outcomes trapping for incorrect invocation of subprogram. */
EXCEPTION
WHEN OTHERS THEN
teardown;qcto#report_result(result_guid_in => qu_result_xp.current_test_case, status_in => 'RUNTIME-ERROR', description_in => qcto#error_info);
         END Q##_NEW_TEST_CASE_NAME_;
         BEGIN
         qu_result_xp.mark_start ('{89938D93-0D7E-2B7A-E054-002128953FC8}');
         qu_result_xp.set_current_ut ('{89938D93-0D7E-2B7A-E054-002128953FC8}');
         if g_pre_ut_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('PRE_UNIT_TEST','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_ASSIGN_ROLES',''); end if;
         DECLARE
   TYPE order_t IS TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;
   l_exec_order order_t;
         PROCEDURE run_one (seq_in IN PLS_INTEGER) IS BEGIN 
         CASE seq_in
         WHEN 2 THEN  IF NOT qcto#skip_tc ('{89947E0D-E5DE-4D7B-E054-002128953FC8}') THEN Q##RUN_F_ASSIGN_ROLES_FUNCTION; END IF;
         WHEN 3 THEN  IF NOT qcto#skip_tc ('{89947E0D-E5DF-4D7B-E054-002128953FC8}') THEN Q##RUN_F_ASSIGN_ROLES_FUNCTI_1; END IF;
         WHEN 4 THEN  IF NOT qcto#skip_tc ('{89947E0D-E5E0-4D7B-E054-002128953FC8}') THEN Q##RUN_F_ASSIGN_ROLES_FUNCTI_2; END IF;
         WHEN 1 THEN  IF NOT qcto#skip_tc ('{89938D93-0D99-2B7A-E054-002128953FC8}') THEN Q##_NEW_TEST_CASE_NAME_; END IF;
         END CASE; END run_one; BEGIN
         /* Use order specified by tester. */
         l_exec_order(1) := 1;
         l_exec_order(2) := 2;
         l_exec_order(3) := 3;
         l_exec_order(4) := 4;
         FOR ii IN 1 .. l_exec_order.COUNT LOOP run_one (l_exec_order(ii)); END LOOP;
         END;
         IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
         if g_post_ut_hook_exists
               then
                  QU_CONFIG.MY_CODETESTER_HOOK ('POST_UNIT_TEST','AVATIER','AVATIER','SSI_AVATIER_ID_ENFORCER','Q##SSI_AVATIER_ID_ENFORCER','F_ASSIGN_ROLES',''); end if;
         qu_result_xp.mark_end ('{89938D93-0D7E-2B7A-E054-002128953FC8}');
         EXCEPTION WHEN OTHERS THEN 
         IF qu_result_xp.profiling_enabled THEN qu_result_xp.stop_profiling (done_with_in => qu_result_xp.c_this_test_case); END IF;
         qcto#report_result (result_guid_in => qu_result_xp.current_unit_test,status_in => 'RUNTIME-ERROR',description_in => qcto#error_info);
         
         IF qu_result_xp.rolling_back_after () THEN ROLLBACK;  END IF;
         END Q##F_ASSIGN_ROLES;
         END "Q##SSI_AVATIER_ID_ENFORCER";

/
